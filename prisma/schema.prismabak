generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Art {
  id          Int           @id @default(autoincrement())
  galleryId   Int?          @default(0)
  path        String        @db.VarChar(764)
  prompt      String?       @db.Text
  artPromptId Int?          @default(0)
  userId      Int?          @default(0)
  pitchId     Int?          @default(0)
  createdAt   DateTime?     @db.DateTime(0)
  updatedAt   DateTime?     @db.DateTime(0)
  boos        Int?          @default(0)
  claps       Int?          @default(0)
  cfg         String?       @db.VarChar(764)
  checkpoint  String?       @db.VarChar(764)
  sampler     String?       @db.VarChar(764)
  seed        Int?          @default(0)
  steps       Int?          @default(0)
  pitch       String?       @db.VarChar(764)
  channelId   Int?          @default(0)
  isOrphan    Int?          @default(0) @db.TinyInt
  isPublic    Int?          @default(0) @db.TinyInt
  isMature    Int?          @default(0) @db.TinyInt
  designer    String?       @db.VarChar(764)
  Reaction Reaction[]
}

model Prompt {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime? @db.DateTime(0)
  userId        Int       @default(0)
  prompt        String    @db.VarChar(8000)
  galleryId     Int?      @default(0)
  pitch         String?   @db.VarChar(764)
  pitchId       Int?      @default(0)
  DB_ROW_HASH_1 BigInt
}

model Reaction {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  userId    Int
  artId     Int?
  claps     Int       @default(0)
  boos      Int       @default(0)
  title     String?
  comment   String?   @db.Text
  reaction  String?
  pitchId   Int?
  Art       Art?      @relation(fields: [artId], references: [id])
  Pitch     Pitch?    @relation(fields: [pitchId], references: [id])
  User      User      @relation(fields: [userId], references: [id])

  @@index([artId], map: "Reaction_artId_fkey")
  @@index([pitchId], map: "Reaction_pitchId_fkey")
  @@index([userId], map: "Reaction_userId_fkey")
}

model Bot {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime? @db.DateTime(0)
  BotType           String    @db.VarChar(764)
  name              String    @unique(map: "Bot_id_key", length: 200) @db.VarChar(764)
  isPublic          Int       @default(0) @db.TinyInt
  underConstruction Int       @default(0) @db.TinyInt
  canDelete         Int       @default(0) @db.TinyInt
  subtitle          String    @db.VarChar(764)
  description       String    @db.VarChar(764)
  avatarImage       String    @db.VarChar(764)
  botIntro          String    @db.VarChar(764)
  userIntro         String    @db.VarChar(764)
  prompt            String    @db.VarChar(764)
  trainingPath      String?   @db.VarChar(764)
  theme             String?   @db.VarChar(764)
  personality       String    @db.VarChar(764)
  modules           String?   @db.VarChar(764)
  userId            Int?      @default(0)
  sampleResponse    String?   @db.VarChar(764)
  tagline           String?   @db.VarChar(764)
  Slogan            Slogan[]
}

model Channel {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime? @db.DateTime(0)
  userId      Int?      @default(16580608)
  label       String    @unique(map: "Channel_id_key", length: 200) @db.VarChar(764)
  description String?   @db.VarChar(8000)
  tagId       Int?      @default(0)
  title       String?   @db.VarChar(764)
  pitchId     Int?      @default(0)
}

model ChatExchange {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @db.DateTime(0)
  updatedAt       DateTime @updatedAt @db.DateTime(0)
  botId           Int?     @default(57088)
  botName         String   @db.VarChar(255)
  userId          Int
  username        String   @db.VarChar(255)
  userPrompt      String   @db.Text
  botResponse     String   @db.Text
  liked           Int?     @default(0) @db.TinyInt
  hated           Int?     @default(0) @db.TinyInt
  loved           Int?     @default(0) @db.TinyInt
  flagged         Int?     @default(0) @db.TinyInt
  previousEntryId Int?     @default(0)
}

model Gallery {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime? @db.DateTime(0)
  name           String    @unique(map: "Gallery_id_key", length: 200) @db.VarChar(764)
  description    String?   @db.Text
  mediaId        String?   @db.VarChar(764)
  url            String?   @db.VarChar(764)
  custodian      String?   @db.VarChar(764)
  userId         Int?      @default(0)
  content        String    @db.VarChar(764)
  highlightImage String?   @db.VarChar(764)
  imagePaths     String?   @db.Text
  isMature       Int       @default(0) @db.TinyInt
}

model Game {
  id         Int       @id @unique @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  content    String    @db.Text
  category   String    @default("Blue Sky Tasks")
  isFinished Boolean   @default(false)
  userId     Int
  reward     String    @default("A Magic Reward")
  icon       String?
  points     Int       @default(10)
  isPrivate  Boolean   @default(false)
  User       User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "Game_userId_fkey")
}

model Log {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  timestamp DateTime @db.DateTime(0)
  username  String?  @db.VarChar(764)
}

model Message {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  sender    String    @db.VarChar(764)
  recipient String    @db.VarChar(764)
  content   String    @db.Text
  channelId Int
  botId     Int?      @default(0)
  userId    Int?      @default(0)

  @@index([userId], map: "Message_id_key")
}

model Milestone {
  id           Int       @id @default(autoincrement())
  label        String    @db.VarChar(764)
  message      String    @db.VarChar(764)
  icon         String    @db.VarChar(764)
  karma        Int       @default(0)
  isRepeatable Int       @default(100) @db.TinyInt
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime? @db.DateTime(0)
  triggerCode  String    @db.VarChar(764)
  tooltip      String?   @db.VarChar(764)
  isActive     Int       @default(0) @db.TinyInt
  pageHint     String?   @db.VarChar(764)
  subtleHint   String?   @db.VarChar(764)
}

model MilestoneRecord {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @db.DateTime
  updatedAt   DateTime? @db.DateTime
  milestoneId Int
  userId      Int
  username    String?   @db.VarChar(764)
}

model Pitch {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @db.DateTime(0)
  updatedAt      DateTime?     @updatedAt @db.DateTime(0)
  title          String        @unique(map: "Pitch_id_key") @db.VarChar(764)
  pitch          String        @db.VarChar(764)
  userId         Int           @default(0)
  isPublic       Int           @default(0) @db.TinyInt
  claps          Int           @default(0)
  boos           Int           @default(0)
  channelId      Int?          @unique(map: "Pitch_title_key") @default(0)
  designer       String        @db.VarChar(764)
  flavorText     String?       @db.VarChar(764)
  isOrphan       Int           @default(0) @db.TinyInt
  creatorId      Int?          @default(0)
  highlightImage String        @db.VarChar(764)
  isMature       Int           @default(0) @db.TinyInt
  Reaction    Reaction[]

  @@index([userId], map: "Pitch_channelId_key")
}

model Cart {
  id         Int        @id @unique @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?
  customerId Int
  Customer   Customer   @relation(fields: [customerId], references: [id])
  items      CartItem[]

  @@index([customerId], map: "Cart_customerId_fkey")
}

model CartItem {
  id        Int     @id @unique @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  Cart      Cart    @relation(fields: [cartId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])

  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
}

model Customer {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  email     String    @unique
  name      String?
  userId    Int?      @unique
  Carts     Cart[]
  User      User?     @relation(fields: [userId], references: [id])
}

model RandomList {
  id     Int    @id @default(autoincrement())
  title  String @db.VarChar(764)
  items  String @db.LongText
  userId Int?   @default(0)
}

model Post {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime? @db.DateTime(0)
  userId         Int?      @default(0)
  username       String    @db.VarChar(764)
  content        String    @db.VarChar(764)
  title          String?   @db.VarChar(764)
  label          String    @db.VarChar(764)
  imagePath      String?   @db.VarChar(764)
  artId          Int?      @default(0)
  pitchId        Int?      @default(0)
  pitchname      String?   @db.VarChar(764)
  sloganContent  String?   @db.VarChar(764)
  sloganId       Int?      @default(0)
  botId          Int?      @default(0)
  botname        String?   @db.VarChar(764)
  channelId      Int?      @default(0)
  likes          Int       @default(0)
  dislikes       Int       @default(0)
  hates          Int       @default(0)
  loves          Int       @default(0)
  jellybeanClaps Int       @default(0)
  isFavorite     Int       @default(0) @db.TinyInt
}

model Product {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @db.DateTime(0)
  updatedAt     DateTime?  @db.DateTime(0)
  title         String     @db.VarChar(764)
  category      String     @db.VarChar(764)
  flavorText    String?    @db.VarChar(764)
  description   String     @db.VarChar(8000)
  costInPennies Int        @default(0)
  userId        Int        @default(0)
  passcode      String?    @db.VarChar(764)
  imagePath     String?    @db.VarChar(764)
  CartItem      CartItem[]
}

model Resource {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @db.DateTime(0)
  updatedAt    DateTime?    @db.DateTime(0)
  userId       Int?         @default(-65536)
  name         String       @unique(map: "Resource_id_key", length: 200) @db.VarChar(764)
  customLabel  String?      @db.VarChar(764)
  MediaPath    String?      @db.VarChar(764)
  customUrl    String?      @db.VarChar(764)
  civitaiUrl   String?      @db.VarChar(764)
  huggingUrl   String?      @db.VarChar(764)
  localPath    String?      @db.VarChar(764)
  description  String?      @db.Text
  resourceType ResourceType
  isMature     Int          @default(0) @db.TinyInt
  galleryCount Int?         @default(0)
}

model Reward {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  icon       String    @db.VarChar(764)
  text       String    @db.VarChar(764)
  power      String    @db.VarChar(764)
  collection String    @db.VarChar(764)
  rarity     Int       @default(0)
  label      String?   @db.VarChar(764)
  Todo       Todo[]
}

model Slogan {
  id             Int      @id @default(autoincrement())
  contentType    String   @default("slogan")
  purpose        String   @default("Anti-Malaria Fundraiser")
  url            String?  @default("https://www.againstmalaria.org/amibot")
  characterLimit Int      @default(300)
  content        String   @db.VarChar(2000)
  likes          Int      @default(0)
  dislikes       Int      @default(0)
  hates          Int      @default(0)
  loves          Int      @default(0)
  isLiked        Boolean  @default(false)
  isLoved        Boolean  @default(false)
  wasKept        Boolean?
  wasDiscarded   Boolean?
  username       String   @default("Kind Guest")
  userId         Int      @default(0)
  model          String   @default("3.5")
  kindRobot      String   @default("amibot")
  botId          Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Bot            Bot?     @relation(fields: [botId], references: [id])
  User           User     @relation(fields: [userId], references: [id])

  @@index([botId], map: "Slogan_botId_fkey")
  @@index([userId], map: "Slogan_userId_fkey")
}

model Tag {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  label      String    @db.VarChar(764)
  title      String    @db.VarChar(764)
  userId     Int       @default(0)
  isPublic   Int?      @default(0) @db.TinyInt
  channelId  Int?      @unique(map: "Tag_id_key") @default(0)
  flavorText String?   @db.VarChar(764)
  pitch      String?   @db.VarChar(764)
  isMature   Int       @default(0) @db.TinyInt
  sloganId   Int?      @default(0)
  postId     Int?      @default(0)
}

model Todo {
  id        Int       @id @default(autoincrement())
  task      String
  category  String
  completed Boolean   @default(false)
  createdAt DateTime  @default(now())
  userId    Int
  rewardId  Int?
  updatedAt DateTime?
  Reward    Reward?   @relation(fields: [rewardId], references: [id])
  User      User      @relation(fields: [userId], references: [id])

  @@index([rewardId], map: "Todo_rewardId_fkey")
  @@index([userId], map: "Todo_userId_fkey")
}

model User {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @db.DateTime
  updatedAt           DateTime?     @db.DateTime
  Role                Role
  username            String        @db.VarChar(255)  @unique
  email               String?       @db.VarChar(255)
  questPoints         Int           @default(0)
  emailVerified       DateTime?     @db.DateTime
  name                String?       @db.VarChar(255)
  address1            String?       @db.Text
  address2            String?       @db.Text
  avatarImage         String?       @db.Text
  bio                 String?       @db.Text
  birthday            DateTime?     @db.DateTime
  city                String?       @db.Text
  country             String?       @db.Text
  discordUrl          String?       @db.Text
  facebookUrl         String?       @db.Text
  instagramUrl        String?       @db.Text
  kindrobotsUrl       String?       @db.Text
  languages           String?       @db.Text
  phone               String?       @db.VarChar(255)
  state               String?       @db.VarChar(255)
  timezone            String?       @db.VarChar(255)
  twitterUrl          String?       @db.Text
  apiKey              String?       @db.Text
  password            String?       @db.Text
  spotifyAccessToken  String?       @db.Text
  spotifyID           String?       @db.Text
  spotifyRefreshToken String?       @db.Text
  karma               Int           @default(0)
  mana                Int           @default(0)
  clickRecord         Int?          @default(0)
  matchRecord         Int?          @default(0)
  Reaction         Reaction[]
  Customer            Customer?
  Game                Game[]
  Slogan              Slogan[]
  Todo                Todo[]
}

model ReactionToTag {
  A Int
  B Int

  @@id([A, B])
  @@map("_ReactionToTag")
}

model ArtToProduct {
  A Int
  B Int

  @@id([A, B])
  @@map("_ArtToProduct")
}

model ArtToTag {
  A Int
  B Int

  @@id([A, B])
  @@map("_ArtToTag")
}

model MilestoneToUser {
  A Int
  B Int

  @@id([A, B])
  @@map("_MilestoneToUser")
}

model RewardToUser {
  A Int
  B Int

  @@id([A, B])
  @@map("_RewardToUser")
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  ADMIN
  GUEST
  BOT
  DESIGNER
  CHILD
}

enum ResourceType {
  CHECKPOINT
  EMBEDDING
  LORA
  LYCORIS
  HYPERNETWORK
  CONTROLNET
  URL
  API
}
