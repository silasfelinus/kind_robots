import{aL as s}from"./entry.31782de1.js";var n=(r=>(r[r.NETWORK_ERROR=0]="NETWORK_ERROR",r[r.VALIDATION_ERROR=1]="VALIDATION_ERROR",r[r.AUTH_ERROR=2]="AUTH_ERROR",r[r.UNKNOWN_ERROR=3]="UNKNOWN_ERROR",r))(n||{});const a=s("error",{state:()=>({message:null,type:null,history:[]}),actions:{setError(r,e){let t;e instanceof Error?t=e.message:typeof e=="string"?t=e:t="An unknown error occurred";const o={type:r,message:t,timestamp:new Date};this.message=t,this.type=r,this.history.push(o)},clearError(){this.message=null,this.type=null},async handleError(r,e=3,t="An error occurred"){try{return await r()}catch(o){throw o instanceof Error&&(t+=` Details: ${o.message}`),this.setError(e,t),new Error(t)}},getErrors(){return this.history},checkConnection(){return new Promise((r,e)=>{this.history?r(!0):e(new Error("Cannot connect to Error store."))})},async loadStore(){try{return await this.getErrors(),`loaded ${this.getErrors}. Hopefully there we no errors there.`}catch(r){throw console.error("Error loading store:",r),r}}}});export{n as E,a as u};
