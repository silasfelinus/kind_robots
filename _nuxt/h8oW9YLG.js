import{aK as n}from"./CH0slHa8.js";const a=n({id:"product",state:()=>({products:[]}),actions:{setProducts(r){this.products=r},getProductById(r){return this.products.find(t=>t.id===r)||null},async fetchProducts(){try{const t=await(await fetch("/api/products/index.get.ts")).json();t.success?this.setProducts(t.products):console.error(`Failed to fetch products: ${t.message}`)}catch(r){console.error(`An error occurred while fetching products: ${r}`)}},async fetchProductById(r){try{return(await(await fetch(`/api/products/${r}.get.ts`)).json()).product}catch(t){console.error(`An error occurred while fetching product by id: ${t}`)}},async createProduct(r){try{const e=await(await fetch("/api/products/index.post.ts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})).json();e.success&&this.products.push(e.newProduct)}catch(t){console.error(`An error occurred while creating a new product: ${t}`)}},async updateProduct(r,t){try{if((await(await fetch(`/api/products/${r}.patch.ts`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).json()).success){const s=this.products.findIndex(c=>c.id===r);s!==-1&&(this.products[s]={...this.products[s],...t})}}catch(e){console.error(`An error occurred while updating the product: ${e}`)}},async deleteProduct(r){try{if((await(await fetch(`/api/products/${r}.delete.ts`,{method:"DELETE"})).json()).success){const o=this.products.findIndex(s=>s.id===r);o!==-1&&this.products.splice(o,1)}}catch(t){console.error(`An error occurred while deleting the product: ${t}`)}}}});export{a as u};
