import{aH as u,a1 as h,d as l,G as m,b as f,c as y,e as c,t as i,O as o}from"./entry.5b5f4630.js";const I=u({id:"cart",state:()=>({currentCartId:null,carts:[],cartItems:[]}),actions:{setCurrentCartId(s){this.currentCartId=s},async createCart(s){try{const e=await(await fetch("/api/cart",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({customerId:s})})).json();return e.success?(this.carts.push(e.newCart),{success:!0,cartId:e.newCart.id}):{success:!1,message:e.message}}catch(t){return console.error(`An error occurred while creating a new cart: ${t}`),{success:!1,message:t instanceof Error?t.message:String(t)}}},async fetchCartByCustomerId(s){try{return(await(await fetch(`/api/customers/${s}.get.ts`)).json()).cart}catch(t){console.error(`An error occurred while fetching cart by customer ID: ${t}`)}},async deleteCart(s){try{if((await(await fetch(`/api/cart/${s}.delete.ts`,{method:"DELETE"})).json()).success){const r=this.carts.findIndex(a=>a.id===s);r!==-1&&this.carts.splice(r,1)}}catch(t){console.error(`An error occurred while deleting the cart: ${t}`)}},async addItem(s,t=1){if(!this.currentCartId){h({success:!1,message:"No active cart.",statusCode:400});return}try{const r=await(await fetch(`/api/carts/${this.currentCartId}.post.ts`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({cartId:this.currentCartId,productId:s,quantity:t})})).json();r.success&&this.cartItems.push(r.newCartItem)}catch(e){h({success:!1,message:e.message,statusCode:500})}},async fetchItemsByCartId(s){try{const e=await(await fetch(`/api/carts/${s}.get.ts`)).json();e.success&&(this.cartItems=e.items)}catch(t){console.error(`An error occurred while fetching items by cart ID: ${t}`)}},async updateCartItem(s,t){try{if((await(await fetch(`/api/cartItem/${s}.patch.ts`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).json()).success){const a=this.cartItems.findIndex(d=>d.id===s);a!==-1&&(this.cartItems[a]={...this.cartItems[a],...t})}}catch(e){console.error(`An error occurred while updating the cart item: ${e}`)}},async deleteCartItem(s){try{if((await(await fetch(`/api/cartItem/${s}.delete.ts`,{method:"DELETE"})).json()).success){const r=this.cartItems.findIndex(a=>a.id===s);r!==-1&&this.cartItems.splice(r,1)}}catch(t){console.error(`An error occurred while deleting the cart item: ${t}`)}},async batchAddItemsToCart(s){try{const e=await(await fetch("/api/cartItem/index.post.ts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json();e.success&&this.cartItems.push(...e.newCartItems)}catch(t){console.error(`An error occurred while batch adding items to the cart: ${t}`)}}}}),C={class:"product-card bg-base-200 rounded-2xl p-4 flex flex-col"},g={class:"product-header flex items-center justify-between mb-2"},w={class:"product-title text-lg font-bold"},x={class:"product-price text-info"},_={class:"product-info"},b={class:"product-category text-sm text-accent"},v={class:"product-flavor text-sm text-warning"},$={class:"product-description text-sm text-info"},j={class:"product-actions flex items-center mt-2"},A=l({__name:"ProductCard",props:{product:{}},setup(s){const t=s,{product:e}=t,r=I(),a=m(()=>{var n;return(n=r.carts[0])==null?void 0:n.id}),d=n=>{a.value&&r.addItem(n,a.value)};return(n,p)=>(f(),y("div",C,[c("div",g,[c("div",w,i(o(e).title),1),c("div",x,i(o(e).costInPennies)+" Pennies",1)]),c("div",_,[c("div",b,"Category: "+i(o(e).category),1),c("div",v,i(o(e).flavorText),1),c("div",$,i(o(e).description),1)]),c("div",j,[c("button",{class:"bg-primary text-lg px-2 py-1 rounded",onClick:p[0]||(p[0]=T=>d(o(e).id))},"Add to Cart")])]))}});export{A as _,I as u};
