generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ModelType {
  BOT
  GALLERY
  MEDIA
  MESSAGE
  PROJECT
  PROMPT
  QUEST
  REACTION
  RESOURCE
  USER
  MODEL
  DREAM
  STATUS
  ERROR
  CONTENT
  GAME
}

// example model for style guide
model Model {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  modelType ModelType
  label     String
  content   String
  userId    Int?
  User      User?     @relation(fields: [userId], references: [id])
}

// these are modeler and api resource types
// to process media data
enum ResourceType {
  CHECKPOINT
  EMBEDDING
  LORA
  LYCORIS
  HYPERNETWORK
  CONTROLNET
  URL
  API
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  ADMIN
  GUEST
  BOT
  DESIGNER
}

// ***BOT
// our modular promptbots
// the meat-and-potatoes of our tech interactibles
model Bot {
  id                Int            @id @unique @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  BotType           BotType        @default(CHATBOT)
  name              String         @unique
  isPublic          Boolean        @default(true)
  underConstruction Boolean        @default(false)
  canDelete         Boolean        @default(false)
  subtitle          String         @default("Kind Robot")
  description       String         @default("I'm a kind robot")
  avatarImage       String         @default("/images/wonderchest/wonderchest304_(23).webp")
  botIntro          String         @default("You're a Kind Robot")
  userIntro         String         @default("Let's make a difference. Here's my idea:")
  prompt            String         @default("Arm butterflies with mini-flamethrowers to kick mosquitos butts")
  trainingPath      String?
  theme             String?
  personality       String         @default("helpful, inquisitive, considerate")
  modules           String?
  User              User?          @relation(fields: [userId], references: [id])
  userId            Int?
  Media             Media[]
  TrainingData      TrainingData[]
}

enum BotType {
  PROMPTBOT
  CHATBOT
  ARTBOT
}

// media collections
model Gallery {
  id             Int         @id @unique @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  name           String      @unique
  content        String
  Art            Art[]
  description    String?     @db.Text
  mediaId        String?
  url            String?
  isNsfw         Boolean     @default(false)
  custodian      String?
  User           User?       @relation(fields: [userId], references: [id])
  userId         Int?
  highlightImage String?
  imagePaths     String?     @db.Text
  ArtPrompt      ArtPrompt[]
}

model Art {
  id          Int           @id @unique @default(autoincrement())
  Gallery     Gallery?      @relation(fields: [galleryId], references: [id])
  galleryId   Int?
  path        String
  ArtReaction ArtReaction[]
  pitch       String?
  mainPitch   Tag?          @relation(fields: [pitchId], references: [id])
  pitchId     Int?
  prompt      String?       @db.Text
  userId      Int?          @default(0)
  User        User?         @relation(fields: [userId], references: [id])
  ArtPrompt   ArtPrompt?    @relation(fields: [artPromptId], references: [id])
  artPromptId Int?
}

model ArtReaction {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Art       Art      @relation(fields: [artId], references: [id], onDelete: Cascade)
  artId     Int
  claps     Int      @default(0)
  boos      Int      @default(0)
  title     String?
  Tags      Tag[]
  reaction  String?
  comment   String?  @db.Text
}

model ArtPrompt {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @default(0)
  Art       Art[]
  prompt    String   @db.Text
  pitch     String?
  Gallery   Gallery? @relation(fields: [galleryId], references: [id])
  galleryId Int?     @default(21) //cafefred
}

model Tag {
  id           Int           @id @unique @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ArtReactions ArtReaction[]
  label        String        @default("art")
  title        String
  Art          Art[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       Int?          @default(0)
  isNSFW       Boolean?
  isPublic     Boolean?
}

model Channel {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id])
  userId      Int       @default(0) //kind guest global acount
  label       String    @default("global")
  description String?   @db.Text
  messages    Message[]
}

model Message {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    String   @default("user")
  recipient String   @default("prompt")
  content   String   @db.Text
  channelId Int
  Channel   Channel  @relation(fields: [channelId], references: [id])
}

// User Incentivization and interaction element
model Game {
  id         Int      @id @unique @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String   @db.Text
  category   String   @default("Blue Sky Tasks")
  isFinished Boolean  @default(false)
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  reward     String   @default("A Magic Reward")
  icon       String?
  points     Int      @default(10)
  isPrivate  Boolean  @default(false)
}

// Any bob-text media deemed important enough to store in the database
model Media {
  id           Int      @id @unique @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  path         String   @default("/")
  isNsfw       Boolean  @default(false)
  isFavorite   Boolean  @default(false)
  isFlagged    Boolean  @default(false)
  tags         String   @default("AI, Cafe Purr")
  designer     String?
  exifDataId   Int?
  Bot          Bot?     @relation(fields: [botId], references: [id])
  botId        Int?
  description  String?
  negative     String?
  steps        Int?
  seed         Int?
  sampler      String?
  cfg          String?
  size         String?
  modelHash    String?
  modelName    String?
  template     String?
  negTemplate  String?
  clipData     String?
  deepboroData String?
}

// milestones are user-experience records
model Milestone {
  id              Int               @id @default(autoincrement())
  label           String
  triggerCode     String
  message         String
  tooltip         String?           @default("this has not been revealed")
  icon            String            @default("mdi:milestone-add")
  karma           Int               @default(100)
  isRepeatable    Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MilestoneRecord MilestoneRecord[]
  isActive        Boolean           @default(false)
  pageHint        String?
  subtleHint      String?
}

// logs milestone rewards
model MilestoneRecord {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  milestoneId Int
  userId      Int
  User        User      @relation(fields: [userId], references: [id])
  Milestone   Milestone @relation(fields: [milestoneId], references: [id])
}

// Public and private salons hosted by users
// The name changes frequently: pitch, concept, vision, Vibe, Collection, Group, Page...
model Project {
  id                 Int      @id @unique @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  title              String
  category           String
  content            String   @default("Here's the idea...") @db.Text
  allowComments      Boolean  @default(false)
  description        String   @default("")
  isPublic           Boolean  @default(true)
  hasAdmission       Boolean  @default(false)
  paywallDestination String?
  Host               User     @relation(fields: [userId], references: [id])
  hostId             Int
  usdFee             Float
  portalUrl          String?
  pitchUrl           String?
  userId             Int
}

model Log {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  timestamp DateTime @default(now())
  username  String? // Optional, if you want to store the username
}

enum StringType {
  TAG //single unit tag phrase 
  PROMPT //combined nlp prompt message
  WILDCARD //list for randomized generations
  RESPONSE //message response nlp to human
  MEDIA_URL // Media url
  URL // generic web url
  CODE //validated codewall
  ERROR // An Error message125m.
  MESSAGE // Generic message
  POST // generic feed post
}

// Reaction / review system
// Bot reactions can be recovered with Reaction.content
model Reaction {
  id          Int       @id @unique @default(autoincrement())
  User        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviewTitle String?
  modelType   ModelType
  modelId     Int
  content     String?
  rating      Int?
}

// Online resources such as checkpoints, embeddings
// lora, hypernetworks, and urls worth preserving
model Resource {
  id           Int          @id @unique @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       Int?
  name         String       @unique
  isNsfw       Boolean      @default(false)
  customLabel  String?
  MediaPath    String?
  customUrl    String?
  civitaiUrl   String?
  huggingUrl   String?
  localPath    String?
  description  String?      @db.Text
  resourceType ResourceType @default(CHECKPOINT)
}

// Reward model
model Reward {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  icon       String
  text       String
  power      String
  collection String   @default("genesis")
  User       User[]
  Todo       Todo[]
  rarity     Int      @default(50)
  label      String?
}

// Todo model
model Todo {
  id        Int      @id @default(autoincrement())
  task      String
  category  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  rewardId  Int?
  Reward    Reward?  @relation(fields: [rewardId], references: [id])
}

model TrainingData {
  id        Int            @id @unique @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  label     String
  Bots      Bot[]
  training  TrainingLine[] // <-- many-to-many relationship
}

model TrainingLine {
  id           Int            @id @unique @default(autoincrement())
  role         String
  content      String // The content of that role in a particular turn
  TrainingData TrainingData[] // < traininglines should be reusable in multiple trainindData structures
}

//help migrate everything to just use User
model User {
  id                  Int               @id @unique @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Role                Role              @default(USER)
  username            String            @unique
  email               String?           @unique
  emailVerified       DateTime?
  questPoints         Int               @default(0)
  name                String?
  bio                 String?           @default("I was born and then things happened and now I'm here.") @db.Text
  birthday            DateTime?
  address1            String?
  address2            String?
  city                String?
  state               String?
  country             String?
  timezone            String?
  phone               String?
  languages           String?
  avatarImage         String?           @default("/images/botcafe.webp")
  // Social Media
  instagramUrl        String?
  twitterUrl          String?
  facebookUrl         String?
  discordUrl          String?
  kindrobotsUrl       String?
  // gamification
  mana                Int?              @default(1000) // rate-limited user tokens
  karma               Int?              @default(0) // user experience for website interactions
  clickRecord         Int?              @default(0)
  matchRecord         Int?              @default(0)
  //Auth
  apiKey              String?           @unique
  password            String?
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  spotifyID           String?
  // Relations
  Bots                Bot[]
  Galleries           Gallery[]
  Game                Game[]
  Reactions           Reaction[]
  Resources           Resource[]
  Projects            Project[]
  Model               Model[]
  Todo                Todo[]
  Rewards             Reward[]
  MilestoneRecord     MilestoneRecord[]
  ArtReaction         ArtReaction[]
  Channel             Channel[]
  Art                 Art[]
  ArtPrompt           ArtPrompt[]
  Tag                 Tag[]
}
