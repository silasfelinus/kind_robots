import{ax as u,a2 as i,a4 as a,d as m,I as f,c as y,e as I,f as n,t as p,N as h}from"./DJsSOPwi.js";const g=u({id:"cart",state:()=>({currentCartId:null,carts:[],cartItems:[]}),actions:{setCurrentCartId(r){this.currentCartId=r},async createCart(r){const s=i();try{const t=await(await fetch("/api/cart",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({customerId:r})})).json();return t.success?(this.carts.push(t.newCart),{success:!0,cartId:t.newCart.id}):(s.setError(t.type,t.message),{success:!1,message:t.message})}catch(e){return s.setError(a.UNKNOWN_ERROR,"An error occurred while creating a new cart"),console.error(`An error occurred while creating a new cart: ${e}`),{success:!1,message:"An error occurred",statusCode:500}}},async fetchCartByCustomerId(r){const s=i();try{return(await(await fetch(`/api/customers/${r}.get.ts`)).json()).cart}catch(e){s.setError(a.NETWORK_ERROR,"An error occurred while fetching cart by customer ID"),console.error(`An error occurred while fetching cart by customer ID: ${e}`)}},async deleteCart(r){const s=i();try{if((await(await fetch(`/api/cart/${r}.delete.ts`,{method:"DELETE"})).json()).success){const o=this.carts.findIndex(c=>c.id===r);o!==-1&&this.carts.splice(o,1)}}catch(e){s.setError(a.NETWORK_ERROR,"An error occurred while deleting the cart"),console.error(`An error occurred while deleting the cart: ${e}`)}},async addItem(r,s=1){const e=i();if(!this.currentCartId){e.setError(a.VALIDATION_ERROR,"No active cart.");return}try{const o=await(await fetch(`/api/carts/${this.currentCartId}.post.ts`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({cartId:this.currentCartId,productId:r,quantity:s})})).json();o.success?this.cartItems.push(o.newCartItem):e.setError(o.type,o.message)}catch(t){e.setError(a.UNKNOWN_ERROR,"An error occurred while adding item to cart"),console.error(`An error occurred while adding item to cart: ${t}`)}},async fetchItemsByCartId(r){const s=i();try{const t=await(await fetch(`/api/carts/${r}.get.ts`)).json();t.success?this.cartItems=t.items:s.setError(t.type,t.message)}catch(e){s.setError(a.NETWORK_ERROR,"An error occurred while fetching items by cart ID"),console.error(`An error occurred while fetching items by cart ID: ${e}`)}},async updateCartItem(r,s){const e=i();try{const o=await(await fetch(`/api/cartItem/${r}.patch.ts`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json();if(o.success){const c=this.cartItems.findIndex(d=>d.id===r);c!==-1&&(this.cartItems[c]={...this.cartItems[c],...s})}else e.setError(o.type,o.message)}catch(t){e.setError(a.UNKNOWN_ERROR,"An error occurred while updating the cart item"),console.error(`An error occurred while updating the cart item: ${t}`)}},async deleteCartItem(r){const s=i();try{const t=await(await fetch(`/api/cartItem/${r}.delete.ts`,{method:"DELETE"})).json();if(t.success){const o=this.cartItems.findIndex(c=>c.id===r);o!==-1&&this.cartItems.splice(o,1)}else s.setError(t.type,t.message)}catch(e){s.setError(a.UNKNOWN_ERROR,"An error occurred while deleting the cart item"),console.error(`An error occurred while deleting the cart item: ${e}`)}},async batchAddItemsToCart(r){const s=i();try{const t=await(await fetch("/api/cartItem/index.post.ts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})).json();t.success?this.cartItems.push(...t.newCartItems):s.setError(t.type,t.message)}catch(e){s.setError(a.UNKNOWN_ERROR,"An error occurred while batch adding items to the cart"),console.error(`An error occurred while batch adding items to the cart: ${e}`)}}}}),w={class:"product-card bg-base-200 rounded-2xl p-4 flex flex-col"},E={class:"product-header flex items-center justify-between mb-2"},C={class:"product-title text-lg font-bold"},_={class:"product-price text-info"},R={class:"product-info"},x={class:"product-category text-sm text-accent"},N={class:"product-flavor text-sm text-warning"},O={class:"product-description text-sm text-info"},A={class:"product-actions flex items-center mt-2"},T=m({__name:"ProductCard",props:{product:{}},setup(r){const s=r,{product:e}=s,t=g(),o=f(()=>{var d;return(d=t.carts[0])==null?void 0:d.id}),c=d=>{o.value&&t.addItem(d,o.value)};return(d,l)=>(y(),I("div",w,[n("div",E,[n("div",C,p(h(e).title),1),n("div",_,p(h(e).costInPennies)+" Pennies ",1)]),n("div",R,[n("div",x," Category: "+p(h(e).category),1),n("div",N,p(h(e).flavorText),1),n("div",O,p(h(e).description),1)]),n("div",A,[n("button",{class:"bg-primary text-lg px-2 py-1 rounded",onClick:l[0]||(l[0]=S=>c(h(e).id))}," Add to Cart ")])]))}});export{T as _,g as u};
