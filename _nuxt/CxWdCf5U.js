import{aO as x,d as S,r as T,o as I,c as u,e as p,F as m,a6 as w,f as s,t as h,k as N,Z as R,$ as f,a0 as y,ak as j}from"./7SNmuExf.js";import{u as A}from"./BrDNUZqu.js";const B=x({id:"todoStore",state:()=>({todos:[],currentTodo:null}),getters:{currentTodoTask(){var e;return((e=this.currentTodo)==null?void 0:e.task)||null},currentTodoCategory(){var e;return((e=this.currentTodo)==null?void 0:e.category)||null},currentTodoCompleted(){var e;return((e=this.currentTodo)==null?void 0:e.completed)||!1},currentTodoRewardId(){var e;return((e=this.currentTodo)==null?void 0:e.rewardId)||null},currentTodoCreatedAt(){var e;return((e=this.currentTodo)==null?void 0:e.createdAt)||null}},actions:{async fetchTodos(){try{const e=await fetch("/api/todos");e.ok&&(this.todos=await e.json())}catch(e){console.error("An error occurred while fetching todos:",e)}},async toggleCompleted(e){const o=this.todos.find(i=>i.id===e);if(!o)return;const a={...o,completed:!o.completed},r=await fetch("/api/todos",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(r.ok){const i=await r.json(),n=this.todos.findIndex(c=>c.id===e);n!==-1&&(this.todos[n]=i)}},async addTodo(e){const o=await fetch("/api/todos",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(o.ok){const a=await o.json();this.todos.push(a)}},async deleteTodo(e){if((await fetch(`/api/todos/${e}`,{method:"DELETE"})).ok){const a=this.todos.findIndex(r=>r.id===e);a!==-1&&this.todos.splice(a,1)}}}}),M={class:"bg-base-200 p-4"},V=s("h1",{class:"text-2xl mb-4"}," Quests ",-1),D={class:"font-bold"},E=["onClick"],O=["onClick"],U={class:"bg-secondary p-4"},$=s("h2",{class:"text-xl mb-2"}," Add new Quest ",-1),F=["value"],Q=s("button",{type:"submit",class:"btn btn-primary",Todo:""}," Add Quest ",-1),P=S({__name:"TodoManager",setup(e){const o=B(),a=A(),r=T(o.todos),i=T(a.rewards),n=T({task:"",category:"",rewardId:null}),c=async()=>{await o.fetchTodos(),r.value=o.todos},g=async()=>{await a.fetchRewards(),i.value=a.rewards},v=async()=>{await o.addTodo(n.value),n.value={task:"",category:"",rewardId:null},c()},b=async l=>{await o.toggleCompleted(l),c()},k=async l=>{await o.deleteTodo(l),c()},_=l=>{const d=i.value.find(t=>t.id===l);return d?d.text:"No Reward"};return I(()=>{c(),g()}),(l,d)=>(u(),p("div",M,[V,(u(!0),p(m,null,w(r.value,t=>(u(),p("div",{key:t.id,class:"bg-primary p-2 mb-2"},[s("div",null,[s("span",D,h(t.task),1),N(" - "+h(t.category),1)]),s("div",null,"Bounties: "+h(_(t.rewardId)),1),s("button",{class:"btn btn-accent",onClick:C=>b(t.id)}," Toggle Completed ",8,E),s("button",{class:"btn btn-error",onClick:C=>k(t.id)}," Delete ",8,O)]))),128)),s("div",U,[$,s("form",{onSubmit:R(v,["prevent"])},[f(s("input",{"onUpdate:modelValue":d[0]||(d[0]=t=>n.value.task=t),placeholder:"Task",class:"input input-bordered"},null,512),[[y,n.value.task]]),f(s("input",{"onUpdate:modelValue":d[1]||(d[1]=t=>n.value.category=t),placeholder:"Category",class:"input input-bordered"},null,512),[[y,n.value.category]]),f(s("select",{"onUpdate:modelValue":d[2]||(d[2]=t=>n.value.rewardId=t),class:"select select-bordered"},[(u(!0),p(m,null,w(i.value,t=>(u(),p("option",{key:t.id,value:t.id},h(t.text),9,F))),128))],512),[[j,n.value.rewardId]]),Q],32)])]))}});export{P as default};
