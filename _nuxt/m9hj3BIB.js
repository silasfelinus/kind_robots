import{aO as i}from"./Bh_OSRoe.js";const d=i({id:"rewardStore",state:()=>({rewards:[],currentReward:null,error:null,startingRewardId:null,isLoading:!1}),getters:{currentRewardIcon(){var r;return((r=this.currentReward)==null?void 0:r.icon)||null},currentRewardText(){var r;return((r=this.currentReward)==null?void 0:r.text)||null},currentRewardPower(){var r;return((r=this.currentReward)==null?void 0:r.power)||null},currentRewardCollection(){var r;return((r=this.currentReward)==null?void 0:r.collection)||null},currentRewardRarity(){var r;return((r=this.currentReward)==null?void 0:r.rarity)||null}},actions:{async fetchRewards(){this.isLoading=!0;try{const r=await fetch("/api/rewards");if(!r.ok){this.error=`Failed to fetch rewards: ${r.statusText}`;return}const e=await r.json();this.rewards=e.rewards}catch(r){r instanceof Error?this.error=`An error occurred: ${r.message}`:this.error="An unknown error occurred."}finally{this.isLoading=!1}},async editReward(r,e){try{const t=await fetch(`/api/rewards/${r}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const s=await t.json();this.error=`Failed to edit reward: ${t.statusText}. ${s.message||""}`,console.error(this.error,t);return}const{success:o,reward:n}=await t.json();if(o){const s=this.rewards.findIndex(a=>a.id===r);s!==-1&&(this.rewards[s]=n)}}catch(t){t instanceof Error?(this.error=`An error occurred: ${t.message}`,console.error(this.error,t.stack)):(this.error="An unknown error occurred.",console.error(this.error))}},setStartingRewardId(r){this.startingRewardId=r},async createReward(r){try{const e=await fetch("/api/rewards",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok){const o=await e.json();this.error=`Failed to create reward: ${e.statusText}. ${o.message||""}`,console.error(this.error,e);return}const t=await e.json();this.rewards.push(t)}catch(e){e instanceof Error?(this.error=`An error occurred: ${e.message}`,console.error(this.error,e.stack)):(this.error="An unknown error occurred.",console.error(this.error))}},async updateRewardById(r,e){try{const t=await fetch(`/api/rewards/${r}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const s=await t.json();this.error=`Failed to update reward: ${t.statusText}. ${s.message||""}`,console.error(this.error,t);return}const o=await t.json(),n=this.rewards.findIndex(s=>s.id===r);n!==-1&&(this.rewards[n]=o)}catch(t){t instanceof Error?(this.error=`An error occurred: ${t.message}`,console.error(this.error,t.stack)):(this.error="An unknown error occurred.",console.error(this.error))}},async deleteRewardById(r){try{const e=await fetch(`/api/rewards/${r}`,{method:"DELETE"});if(!e.ok){this.error=`Failed to delete reward: ${e.statusText}`;return}const t=this.rewards.findIndex(o=>o.id===r);t!==-1&&this.rewards.splice(t,1)}catch(e){e instanceof Error?(this.error=`An error occurred: ${e.message}`,console.error(this.error)):(this.error="An unknown error occurred.",console.error(this.error))}},async createRewardsBatch(r){try{const e=await fetch("/api/rewards/batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok){this.error=`Failed to create rewards in batch: ${e.statusText}`;return}const{rewards:t}=await e.json();this.rewards.push(...t)}catch(e){e instanceof Error?(this.error=`An error occurred: ${e.message}`,console.error(this.error)):(this.error="An unknown error occurred.",console.error(this.error))}},clearCurrentReward(){this.currentReward=null},setRewardById(r){const e=this.rewards.find(t=>t.id===r);e?this.currentReward=e:(this.error=`Reward with ID ${r} not found.`,console.warn(this.error))}}});export{d as u};
