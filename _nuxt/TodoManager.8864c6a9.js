import{aH as x,d as S,r as T,o as I,b as u,c as p,F as m,a5 as w,e as s,t as h,D as N,Y as R,Z as f,$ as y,ai as j}from"./entry.61d3d36f.js";import{u as A}from"./rewardStore.8c69a823.js";const B=x({id:"todoStore",state:()=>({todos:[],currentTodo:null}),getters:{currentTodoTask(){var e;return((e=this.currentTodo)==null?void 0:e.task)||null},currentTodoCategory(){var e;return((e=this.currentTodo)==null?void 0:e.category)||null},currentTodoCompleted(){var e;return((e=this.currentTodo)==null?void 0:e.completed)||!1},currentTodoRewardId(){var e;return((e=this.currentTodo)==null?void 0:e.rewardId)||null},currentTodoCreatedAt(){var e;return((e=this.currentTodo)==null?void 0:e.createdAt)||null}},actions:{async fetchTodos(){try{const e=await fetch("/api/todos");e.ok&&(this.todos=await e.json())}catch(e){console.error("An error occurred while fetching todos:",e)}},async toggleCompleted(e){const o=this.todos.find(i=>i.id===e);if(!o)return;const d={...o,completed:!o.completed},r=await fetch("/api/todos",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(d)});if(r.ok){const i=await r.json(),n=this.todos.findIndex(c=>c.id===e);n!==-1&&(this.todos[n]=i)}},async addTodo(e){const o=await fetch("/api/todos",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(o.ok){const d=await o.json();this.todos.push(d)}},async deleteTodo(e){if((await fetch(`/api/todos/${e}`,{method:"DELETE"})).ok){const d=this.todos.findIndex(r=>r.id===e);d!==-1&&this.todos.splice(d,1)}}}}),D={class:"bg-base-200 p-4"},M=s("h1",{class:"text-2xl mb-4"},"Quests",-1),V={class:"font-bold"},E=["onClick"],U=["onClick"],$={class:"bg-secondary p-4"},F=s("h2",{class:"text-xl mb-2"},"Add new Quest",-1),O=["onSubmit"],Q=["value"],J=s("button",{type:"submit",class:"btn btn-primary",Todo:""},"Add Quest",-1),H=S({__name:"TodoManager",setup(e){const o=B(),d=A(),r=T(o.todos),i=T(d.rewards),n=T({task:"",category:"",rewardId:null}),c=async()=>{await o.fetchTodos(),r.value=o.todos},g=async()=>{await d.fetchRewards(),i.value=d.rewards},v=async()=>{await o.addTodo(n.value),n.value={task:"",category:"",rewardId:null},c()},b=async l=>{await o.toggleCompleted(l),c()},_=async l=>{await o.deleteTodo(l),c()},k=l=>{const a=i.value.find(t=>t.id===l);return a?a.text:"No Reward"};return I(()=>{c(),g()}),(l,a)=>(u(),p("div",D,[M,(u(!0),p(m,null,w(r.value,t=>(u(),p("div",{key:t.id,class:"bg-primary p-2 mb-2"},[s("div",null,[s("span",V,h(t.task),1),N(" - "+h(t.category),1)]),s("div",null,"Bounties: "+h(k(t.rewardId)),1),s("button",{class:"btn btn-accent",onClick:C=>b(t.id)},"Toggle Completed",8,E),s("button",{class:"btn btn-error",onClick:C=>_(t.id)},"Delete",8,U)]))),128)),s("div",$,[F,s("form",{onSubmit:R(v,["prevent"])},[f(s("input",{"onUpdate:modelValue":a[0]||(a[0]=t=>n.value.task=t),placeholder:"Task",class:"input input-bordered"},null,512),[[y,n.value.task]]),f(s("input",{"onUpdate:modelValue":a[1]||(a[1]=t=>n.value.category=t),placeholder:"Category",class:"input input-bordered"},null,512),[[y,n.value.category]]),f(s("select",{"onUpdate:modelValue":a[2]||(a[2]=t=>n.value.rewardId=t),class:"select select-bordered"},[(u(!0),p(m,null,w(i.value,t=>(u(),p("option",{key:t.id,value:t.id},h(t.text),9,Q))),128))],512),[[j,n.value.rewardId]]),J],40,O)])]))}});export{H as default};
