// /utils/scripts/enrichAnimalData.ts

import fs from 'fs'
import path from 'path'
import { animalDataList } from '@/stores/utils/animalData'
import type { AnimalData } from '@/stores/utils/animalData'

/**
 * Generates a Wikipedia URL for the given animal name.
 */
function getWikiUrl(name: string): string {
  const baseName = name.replace(/\s+/g, '_').replace(/[‚Äô']/g, '')
  return `https://en.wikipedia.org/wiki/${baseName}`
}

/**
 * Generates a fallback Google Image search link for the animal.
 */
function getFallbackImageUrl(name: string): string {
  const query = encodeURIComponent(`${name} animal`)
  return `https://www.google.com/search?tbm=isch&q=${query}`
}

/**
 * Provides basic inferred traits based on keywords in the animal name.
 * Used when data is incomplete or missing.
 */
function inferFallbackTraits(name: string): Partial<AnimalData['traits']> {
  const lower = name.toLowerCase()
  const traits: Partial<AnimalData['traits']> = {
    legs: 4,
    eyes: 2,
    wings: 0,
    antennae: 0,
    tail: true,
  }

  if (/(fish|shark|whale|ray)/.test(lower)) {
    traits.environment = 'water'
    traits.bodyType = 'serpentine'
  } else if (/(crab|shrimp|clam)/.test(lower)) {
    traits.environment = 'water'
    traits.bodyType = 'crustacean'
    traits.legs = 6
  } else if (/(bird|eagle|penguin|owl|booby|puffin|loon)/.test(lower)) {
    traits.environment = 'air'
    traits.hasFeathers = true
    traits.bodyType = 'winged'
    traits.wings = 2
    traits.legs = 2
  } else if (/(lizard|gecko|dragon|iguana)/.test(lower)) {
    traits.environment = 'land'
    traits.texture = 'scaly'
    traits.bodyType = 'quadruped'
  } else if (/(insect|ant|mantis|worm|beetle|fly|bug|glowworm)/.test(lower)) {
    traits.environment = 'land'
    traits.legs = 6
    traits.antennae = 2
    traits.bodyType = 'other'
  } else if (/(jellyfish|sea cucumber|starfish)/.test(lower)) {
    traits.environment = 'water'
    traits.bodyType = 'amorphous'
    traits.legs = 0
  } else if (/(bat|bee)/.test(lower)) {
    traits.environment = 'air'
    traits.wings = 2
    traits.bodyType = 'winged'
  } else {
    traits.environment = 'land'
    traits.bodyType = 'quadruped'
  }

  if (!traits.size) {
    if (/(whale|elephant|giraffe)/.test(lower)) traits.size = 'giant'
    else if (/(shrew|mouse|ant)/.test(lower)) traits.size = 'tiny'
    else if (/(fox|otter|bird)/.test(lower)) traits.size = 'small'
    else traits.size = 'medium'
  }

  return traits
}

/**
 * Enrich the animal list with missing info like wiki URL, fallback image, and default traits.
 */
function enrichAnimalList(data: AnimalData[]): AnimalData[] {
  return data.map((entry) => {
    const enriched: AnimalData = {
      ...entry,
      wikiUrl: entry.wikiUrl || getWikiUrl(entry.scientificName || entry.name),
      imageUrl: entry.imageUrl || getFallbackImageUrl(entry.name),
      traits: {
        ...inferFallbackTraits(entry.name),
        ...entry.traits,
      },
    }

    return enriched
  })
}

function writeEnrichedDataToFile(enrichedList: AnimalData[]) {
  const outputPath = path.resolve('./stores/utils/enrichedAnimalData.ts')
  const outputString =
    `// üêæ Auto-generated enriched animal data\n` +
    `// Do not edit this file manually.\n\n` +
    `import type { AnimalData } from './animalData'\n\n` +
    `export const enrichedAnimalDataList: AnimalData[] = ${JSON.stringify(enrichedList, null, 2)}\n`

  fs.writeFileSync(outputPath, outputString, 'utf-8')
}

/**
 * Run the enrichment script.
 */
function run() {
  console.log('üß™ Enriching animal data...')
  const enriched = enrichAnimalList(animalDataList)

  console.log(`‚úÖ Enriched ${enriched.length} entries.`)
  writeEnrichedDataToFile(enriched)

  console.log('üìÅ Saved enriched data to: /stores/utils/enrichedAnimalData.ts')
  console.log('‚ú® All done. Your hybrid generator just got smarter.')
}

run()
