import{aH as i,aU as c,q as s}from"./entry.e51736e9.js";import{u as a,E as o}from"./errorStore.e002ae10.js";import{u as p,S as n}from"./statusStore.6824e0f1.js";const u=i({id:"content",state:()=>({globals:{},navigation:{},surround:{},page:{},excerpt:"",toc:{},type:"",layout:"",next:{},prev:{},pages:[]}),actions:{async loadStore(){const e=a(),r=p();r.setStatus(n.INFO,"Initializing content store..."),await e.handleError(async()=>{const t=await c();this.globals=t.globals,this.navigation=t.navigation,this.surround=t.surround,this.page=t.page,this.excerpt=t.excerpt,this.toc=t.toc,this.type=t.type,this.layout=t.layout,this.next=t.next,this.prev=t.prev,this.pages=await s().find(),r.setStatus(n.SUCCESS,"Content store initialized successfully"),r.clearStatus()},o.NETWORK_ERROR,"Failed to initialize content store")},async getPageByTitle(e){await a().handleError(async()=>{const t=await s().where({title:e}).findOne();this.page=t},o.NETWORK_ERROR,`Failed to get page by title: ${e}`)},async getPages(){await a().handleError(async()=>{const r=await s().where({$not:{_path:"/"}}).find();this.pages=r},o.NETWORK_ERROR,"Failed to fetch pages")},async getCurrentPage(e){await a().handleError(async()=>{const t=await s().where({_path:e}).findOne();this.page=t},o.NETWORK_ERROR,"Failed to fetch current page")},async refreshContent(){await a().handleError(async()=>{await this.loadStore()},o.NETWORK_ERROR,"Failed to refresh content")}}});export{u};
