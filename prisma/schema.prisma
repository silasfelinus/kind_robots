generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Art {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  path              String?       @db.VarChar(764) @default("UNDEFINED")
  checkpoint        String?       @db.VarChar(256)
  sampler           String?       @db.VarChar(764)
  seed              Int?          @default(-1)
  cfg               Int?          @default(3)
  cfgHalf           Boolean?      @default(false)
  steps             Int?
  designer          String?       @db.VarChar(764)
  promptString      String        @default(" ")
  isPublic          Boolean?      @default(false)
  isMature          Boolean?      @default(false)
  promptId          Int?          @default(1)
  Prompt            Prompt?       @relation(fields: [promptId], references: [id])
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  pitchId           Int?          @default(1)
  Pitch             Pitch?        @relation(fields: [pitchId], references: [id])
  galleryId         Int?          @default(21)
  Gallery           Gallery?      @relation(fields: [galleryId], references: [id])
  channelId         Int?          @default(1)
  Channel           Channel?      @relation(fields: [channelId], references: [id]) 
  Reaction          Reaction[]
  Game              Game[]
  Player            Player[]
  ArtImage          ArtImage[]
}

model ArtImage {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  imageData         String        @db.LongText 
  fileName          String?       @db.VarChar(764)
  galleryId         Int?          @default(21)          
  Gallery           Gallery?      @relation(fields: [galleryId], references: [id])
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  artId             Int?
  Art               Art?          @relation(fields: [artId], references: [id])
}


model Bot {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  BotType           String        @db.VarChar(764)
  name              String        @unique(map: "Bot_id_key", length: 200) @db.VarChar(256)
  subtitle          String?       @db.VarChar(764)
  description       String?       @db.VarChar(764)
  avatarImage       String?       @db.VarChar(764)
  botIntro          String        @db.VarChar(764)
  userIntro         String        @db.VarChar(764)
  prompt            String        @db.VarChar(764)
  trainingPath      String?       @db.VarChar(764)
  theme             String?       @db.VarChar(764)
  personality       String?       @db.VarChar(764)
  modules           String?       @db.VarChar(764)
  sampleResponse    String?       @db.VarChar(764)
  tagline           String?       @db.VarChar(764)
  isPublic          Boolean       @default(false)
  underConstruction Boolean       @default(false)
  canDelete         Boolean       @default(false)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  ChatExhanges      ChatExchange[]
  Messages          Message[]
  Posts             Post[]
}

model Cart {
  id                Int           @id @unique @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  customerId        Int
  Customer          Customer      @relation(fields: [customerId], references: [id])
  items             CartItem[]

  @@index([customerId], map: "Cart_customerId_fkey")
}

model CartItem {
  id                Int           @id @unique @default(autoincrement())
  quantity          Int           @default(1)
  cartId            Int
  Cart              Cart          @relation(fields: [cartId], references: [id])
  productId         Int
  Product           Product       @relation(fields: [productId], references: [id])

  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
}

model Channel {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  label             String        @unique(map: "Channel_id_key", length: 200) @db.VarChar(764)
  description       String?       @db.VarChar(2000)
  title             String?       @db.VarChar(256)
  userId            Int?
  User              User?         @relation(fields: [userId], references: [id])
  componentId       Int?
  Component         Component?    @relation(fields: [componentId], references: [id])
  Messages          Message[]
  Players           Player[]
  Pitches           Pitch[]
  Prompts           Prompt[]
  Posts             Post[]
  Tags              Tag[]
  Art               Art[]
  Reactions         Reaction[]
  Galleries         Gallery[]
}

model ChatExchange {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt @default(now())
  username          String        @db.VarChar(255)
  previousEntryId   Int?          @default(0)
  botName           String        @db.VarChar(255)
  userPrompt        String        @db.Text
  botResponse       String        @db.Text
  isPublic          Boolean       @default(false)
  botId             Int?
  Bot               Bot?          @relation(fields: [botId], references: [id])
  userId            Int?
  User              User?         @relation(fields: [userId], references: [id])
  Reactions         Reaction[]
}

model Component {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  folderName        String
  componentName     String        // Individual component name
  isWorking         Boolean       @default(true)
  underConstruction Boolean       @default(false)
  isBroken          Boolean       @default(false)
  title             String?       // Optional title derived from componentName if not provided
  notes             String?       //optional notes for development wonderlab
  Channels          Channel[]
  Tags              Tag[]
  Reactions         Reaction[]
}


model Customer {
  id                Int           @id @unique @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  email             String        @unique
  name              String?
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  Carts             Cart[]
}

model Gallery {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  name              String        @unique(map: "Gallery_id_key", length: 200) @db.VarChar(764)
  description       String?       @db.Text
  url               String?       @db.VarChar(764)
  custodian         String?       @db.VarChar(764)
  content           String        @db.VarChar(764)
  highlightImage    String?       @db.VarChar(764)
  imagePaths        String?       @db.Text
  isMature          Boolean       @default(false)
  isPublic          Boolean       @default(true)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  channelId         Int?          @default(1)
  Channel           Channel?      @relation(fields: [channelId], references: [id])
  Art               Art[]
  Prompts           Prompt[]
  ArtImage          ArtImage[]
}

model Game {
  id                Int           @id @unique @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  category          String        @default("Blue Sky Tasks")
  descriptor        String?       @db.Text
  designer          String?
  winner            String?
  isFinished        Boolean       @default(false)
  isPrivate         Boolean       @default(false)
  Users             User[]
  Art               Art[]
  Prompt            Prompt[]
  Players           Player[]
}

model Log {
  id                Int           @id @default(autoincrement())
  message           String        @db.Text
  timestamp         DateTime      @db.DateTime(0)
  username          String?       @db.VarChar(764)
  userId            Int?
  User              User?   @relation(fields: [userId], references: [id])
}

model Message {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  sender            String        @db.VarChar(764)
  recipient         String        @db.VarChar(764)
  content           String        @db.Text
  channelId         Int
  channel           Channel       @relation(fields: [channelId], references: [id])
  botId             Int?
  Bot               Bot?          @relation(fields: [botId], references: [id])
  userId            Int?
  User              User?         @relation(fields: [userId], references: [id])
}

model Milestone {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  label             String        @db.VarChar(764)
  message           String        @db.VarChar(764)
  icon              String?       @db.VarChar(764)
  karma             Int           @default(0)
  pageHint          String?       @db.VarChar(764)
  subtleHint        String?       @db.VarChar(764)
  triggerCode       String?       @db.VarChar(764)
  tooltip           String?       @db.VarChar(764)
  isActive          Boolean       @default(false)
  isRepeatable      Boolean       @default(true)
  MilestoneRecords  MilestoneRecord[]

}

model MilestoneRecord {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  username          String?       @db.VarChar(764)
  milestoneId       Int
  Milestones        Milestone     @relation(fields: [milestoneId], references: [id])
  userId            Int
  User              User          @relation(fields: [userId], references: [id])
}

model Pitch {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  title             String?       @db.VarChar(256)
  pitch             String        @unique @db.VarChar(764)
  designer          String?       @db.VarChar(256)
  flavorText        String?       @db.VarChar(512)
  highlightImage    String?       @db.VarChar(256)
  PitchType         PitchType     @default(ARTPITCH)
  isMature          Boolean       @default(false)
  isPublic          Boolean       @default(true)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  playerId          Int?      
  Player            Player?       @relation(fields: [playerId], references: [id])
  channelId         Int?
  Channel           Channel?      @relation(fields: [channelId], references: [id])
  Reactions         Reaction[]
  Tags              Tag[]
  Art               Art[]
  Prompts           Prompt[]
}

enum PitchType {
  ARTPITCH
  BRAINSTORM
  BOT
  ARTGALLERY
  INSPIRATION
}

model Player {
  id                Int           @id @default(autoincrement())
  name              String
  points            Int           @default(0)
  avatarImage       String?
  artId             Int?
  status            PlayerStatus  @default(WAITING)
  gameId            Int?   
  Game              Game?         @relation(fields: [gameId], references: [id])
  userId            Int?
  User              User?         @relation(fields: [userId], references: [id])
  Art               Art[]
  Prompt            Prompt[]
  channelId         Int?
  Channel           Channel?         @relation(fields: [channelId], references: [id])
  Pitches           Pitch[]
}

enum PlayerStatus {
  WAITING
  CHOOSING
  FINISHED
  PLAYING
  LEFT
}

model Post {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  username          String        @db.VarChar(764)
  content           String        @db.VarChar(764)
  title             String?       @db.VarChar(764)
  label             String        @db.VarChar(764)
  imagePath         String?       @db.VarChar(764)
  isFavorite        Boolean       @default(false)
  userId            Int?
  User              User?         @relation(fields: [userId], references: [id])
  botId             Int?
  Bot               Bot?          @relation(fields: [botId], references: [id])
  channelId         Int?
  Channel           Channel?      @relation(fields: [channelId], references: [id])
  Tags              Tag[]
}

model Product {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  title             String        @db.VarChar(764)
  category          String        @db.VarChar(764)
  flavorText        String?       @db.VarChar(764)
  description       String        @db.VarChar(8000)
  costInPennies     Int           @default(0)
  passcode          String?       @db.VarChar(764)
  imagePath         String?       @db.VarChar(764)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  CartItem          CartItem[]
}

model Prompt {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  prompt            String        @db.VarChar(764)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  channelId         Int?          @default(1)
  Channel           Channel?      @relation(fields: [channelId], references: [id])
  galleryId         Int?          @default(21)
  Gallery           Gallery?      @relation(fields: [galleryId], references: [id])
  pitchId           Int?
  Pitch             Pitch?        @relation(fields: [pitchId], references: [id])
  playerId          Int?
  Player            Player?       @relation(fields: [playerId], references: [id])
  Game              Game[]
  Art               Art[]
}

model RandomList {
  id                Int           @id @default(autoincrement())
  title             String        @db.VarChar(764) @unique
  items             String        @db.LongText
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
}

model Reaction {
  id                Int               @id @unique @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt @default(now())
  title             String?
  comment           String?           @db.Text
  reaction          String?
  isLoved           Boolean?          @default(false)
  isClapped         Boolean?          @default(false)
  isBooed           Boolean?          @default(false)
  isHated           Boolean?          @default(false)
  userId            Int               @default(10)
  User              User              @relation(fields: [userId], references: [id])
  artId             Int?
  Art               Art?              @relation(fields: [artId], references: [id])
  pitchId           Int?
  Pitch             Pitch?            @relation(fields: [pitchId], references: [id])
  componentId       Int?
  Component         Component?        @relation(fields: [componentId], references: [id])
  channelId         Int?              @default(1)
  Channel           Channel?          @relation(fields: [channelId], references: [id])
  chatExchangeId    Int?              @default(1)
  ChatExchange      ChatExchange?     @relation(fields: [chatExchangeId], references: [id])
  ReactionCategory  ReactionCategory  @default(CHANNEL)

  @@index([artId], map: "Reaction_artId_fkey")
  @@index([pitchId], map: "Reaction_pitchId_fkey")
  @@index([userId], map: "Reaction_userId_fkey")
  @@index([channelId], map: "Reaction_channelId_fkey")
  @@index([componentId], map: "Reaction_componentId_fkey")
}

enum ReactionStatus {
  Liked
  Loved
  Hated
  Flagged
  Neutral
}

enum ReactionCategory {
  COMPONENT
  ART
  CHANNEL
  USER
  PITCH
}

model Resource {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  name              String        @unique(map: "Resource_id_key", length: 200) @db.VarChar(764)
  customLabel       String?       @db.VarChar(764)
  MediaPath         String?       @db.VarChar(764)
  customUrl         String?       @db.VarChar(764)
  civitaiUrl        String?       @db.VarChar(764)
  huggingUrl        String?       @db.VarChar(764)
  localPath         String?       @db.VarChar(764)
  description       String?       @db.Text
  isMature          Boolean       @default(false)
  resourceType      ResourceType @default(EMBEDDING)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
}

enum ResourceType {
  CHECKPOINT
  EMBEDDING
  LORA
  LYCORIS
  HYPERNETWORK
  CONTROLNET
  URL
  API
}

model Reward {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?      @updatedAt @default(now())
  icon              String         @db.VarChar(256)
  text              String         @db.VarChar(764)
  power             String         @db.VarChar(764)
  collection        String         @db.VarChar(764)
  rarity            Int            @default(0)
  label             String?        @db.VarChar(764)
  userId            Int?           @default(1)
  User              User?          @relation(fields: [userId], references: [id])
}



model Tag {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now()) 
  updatedAt         DateTime?     @updatedAt @default(now())
  label             String        @db.VarChar(256)
  title             String        @db.VarChar(256)
  flavorText        String?       @db.VarChar(764)
  pitch             String?       @db.VarChar(764)
  isPublic          Boolean?      @default(false)
  isMature          Boolean       @default(false)
  userId            Int?          @default(1)
  User              User?         @relation(fields: [userId], references: [id])
  channelId         Int?          @default(1)
  Channel           Channel?      @relation(fields: [channelId], references: [id])
  Posts             Post[]
  Pitches           Pitch[]
  Components        Component[]
}

model Todo {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  content           String
  notes             String?       @default(" ")
  isCompleted       Boolean       @default(false)
  task              String?       @default("todo")
  userId            Int
  User              User          @relation(fields: [userId], references: [id])
}


model User {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt @default(now())
  username          String        @unique @db.VarChar(255)
  email             String?       @db.VarChar(255) @unique
  questPoints       Int           @default(0)
  emailVerified     DateTime?     @db.DateTime(0)
  name              String?       @db.VarChar(255)
  address1          String?       @db.Text
  address2          String?       @db.Text
  avatarImage       String?       @db.Text
  bio               String?       @db.Text
  birthday          DateTime?     @db.DateTime(0)
  city              String?       @db.Text
  country           String?       @db.Text
  discordUrl        String?       @db.Text
  facebookUrl       String?       @db.Text
  instagramUrl      String?       @db.Text
  kindrobotsUrl     String?       @db.Text
  languages         String?       @db.Text
  phone             String?       @db.VarChar(255)
  state             String?       @db.VarChar(255)
  timezone          String?       @db.VarChar(255)
  twitterUrl        String?       @db.Text
  apiKey            String?       @db.Text
  password          String?       @db.Text
  karma             Int           @default(0)
  mana              Int           @default(0)
  clickRecord       Int?          @default(0)
  matchRecord       Int?          @default(0)
  showMature        Boolean       @default(false)
  Channels          Channel[]
  Role              Role @default(USER)
  Art               Art[]
  Reactions         Reaction[]
  Customers         Customer[]
  Games             Game[]
  Milestones        MilestoneRecord[]
  Players           Player[]
  Pitches           Pitch[]
  Galleries         Gallery[]
  Prompts           Prompt[]
  Bots              Bot[]
  ChatExchanges     ChatExchange[]
  Messages          Message[]
  Posts             Post[]
  Products          Product[]
  RandomLists       RandomList[]
  Resources         Resource[]
  Rewards           Reward[]
  Tags              Tag[]
  Logs              Log[]
  ArtImage          ArtImage[]
  Todos             Todo[]
}

model ReactionToTag {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_ReactionToTag_B_index")
  @@map("_ReactionToTag")
}

model ArtToProduct {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_ArtToProduct_B_index")
  @@map("_ArtToProduct")
}

model ArtToTag {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_ArtToTag_B_index")
  @@map("_ArtToTag")
}

model MilestoneToUser {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_MilestoneToUser_B_index")
  @@map("_MilestoneToUser")
}

model RewardToUser {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_RewardToUser_B_index")
  @@map("_RewardToUser")
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  ADMIN
  GUEST
  BOT
  DESIGNER
  CHILD
}


