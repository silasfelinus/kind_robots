generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ModelType {
  BOT
  GALLERY
  IMAGE
  MESSAGE
  PROJECT
  PROMPT
  QUEST
  REACTION
  RESOURCE
  REVIEW
  USER
}

// these are modeler and api resource types
// to process data (usually images)
enum ResourceType {
  CHECKPOINT
  EMBEDDING
  LORA
  LYCORIS
  HYPERNETWORK
  CONTROLNET
  URL
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  ADMIN
  GUEST
  BOT
  DESIGNER
}

// ***BOT
// our modular promptbots
// the meat-and-potatoes of our tech interactibles
model Bot {
  id                Int      @id @unique @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  botType           String   @default("chatbot")
  name              String   @unique
  isPublic          Boolean  @default(true)
  underConstruction Boolean  @default(false)
  canDelete         Boolean  @default(false)
  subtitle          String   @default("Kind Robot")
  description       String   @default("I'm a kind robot")
  avatarImage       String   @default("/images/wonderchest/wonderchest304_(23).webp")
  botIntro          String   @default("You're a Kind Robot")
  userIntro         String   @default("Let's make a difference. Here's my idea:")
  prompt            String   @default("Arm butterflies with mini-flamethrowers to kick mosquitos butts")
  trainingPath      String?
  theme             String?
  personality       String   @default("helpful, inquisitive, considerate")
  modules           String?
  User              User?    @relation(fields: [userId], references: [id])
  userId            Int?
  Images            Image[]
}

// optional prompt data that we can generate programmatically.
model ExifData {
  id          Int      @id @unique @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  negative    String?
  steps       Int?
  seed        Int?
  sampler     String?
  cfg         String?
  size        String?
  modelHash   String?
  modelName   String?
  template    String?
  negTemplate String?
  clip        String?
  deepboro    String?
  Image       Image[]
}

// media collections
model Gallery {
  id          Int      @id @unique @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  Images      Image[]
  description String?
  promoImages String?
  url         String?
  isNSFW      Boolean  @default(false)
  custodian   String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Image {
  id         Int       @id @unique @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  path       String    @default("/")
  isNSFW     Boolean   @default(false)
  isFavorite Boolean   @default(false)
  isFlagged  Boolean   @default(false)
  ExifData   ExifData? @relation(fields: [exifDataId], references: [id])
  tags       String    @default("AI, Cafe Purr")
  designer   String?
  exifDataId Int?
  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Gallery    Gallery?  @relation(fields: [galleryId], references: [id])
  galleryId  Int?
  Bot        Bot?      @relation(fields: [botId], references: [id])
  botId      Int?
}

//raw text data for API processing
model Prompt {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @default("message")
  category  String   @default("user")
  content   String
  designer  User     @relation(fields: [userId], references: [id])
  userId    Int
}

// User model
model User {
  id                 Int        @id @unique @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Role               Role       @default(USER)
  username           String     @unique
  realName           String?
  fancyName          String?
  salt               String?
  hashedPassword     String
  email              String
  bio                String?    @default("I was born and then things happened and now I'm here.")
  birthday           String?
  address1           String?
  address2           String?
  city               String?
  state              String?
  country            String?
  timezone           String?
  phone              String?
  languages          String?
  hideBio            Boolean    @default(false)
  avatarImage        String     @default("/images/botcafe.png")
  isPrivate          Boolean    @default(false)
  allowCookies       Boolean    @default(false)
  defaultTheme       String     @default("default")
  themeOverride      Boolean    @default(false)
  showNsfw           Boolean    @default(false)
  likes              Int        @default(0)
  visits             Int        @default(0)
  hideComments       Boolean    @default(false)
  instagramUrl       String?
  twitterUrl         String?
  facebookUrl        String?
  discordUrl         String?
  kindrobotsUrl      String?
  hideSocialNetworks Boolean    @default(false)
  questPoints        Int        @default(0)
  Bots               Bot[]
  Galleries          Gallery[]
  Images             Image[]
  Messages           Message[]
  Prompts            Prompt[]
  Quests             Quest[]
  Reactions          Reaction[]
  Resources          Resource[]
  Projects           Project[]
}

// text data retrieval system
model Message {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role      @default(USER)
  content     String
  User        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  recipient   ModelType
  recipientId Int
}

// gamification achievement system
model Quest {
  id         Int      @id @unique @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  category   String   @default("Blue Sky Tasks")
  isFinished Boolean  @default(false)
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  reward     String   @default("A Magic Reward")
  icon       String?
  points     Int      @default(10)
  isPrivate  Boolean  @default(false)
}

// Reaction / review system
// Bot reactions can be recovered with Reaction.content
model Reaction {
  id          Int       @id @unique @default(autoincrement())
  User        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviewTitle String?
  modelType   ModelType
  modelId     Int
  content     String?
  rating      Int?
}

// Online resources such as checkpoints, embeddings
// lora, hypernetworks, and urls worth preserving
model Resource {
  id           Int          @id @unique @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       Int?
  name         String       @unique
  isNSFW       Boolean      @default(false)
  customLabel  String?
  imagePath    String?
  customUrl    String?
  civitaiUrl   String?
  huggingUrl   String?
  localPath    String?
  description  String?
  resourceType ResourceType @default(CHECKPOINT)
}

// Public and private salons hosted by users
// The name changes frequently: pitch, concept, vision, Vibe, Collection, Group, Page...
model Project {
  id                 Int      @id @unique @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  title              String
  category           String
  content            String   @default("Here's the idea...")
  allowComments      Boolean  @default(false)
  description        String   @default("")
  isPublic           Boolean  @default(true)
  hasAdmission       Boolean  @default(false)
  paywallDestination String?
  Host               User     @relation(fields: [userId], references: [id])
  hostId             Int
  usdFee             Float
  portalUrl          String?
  pitchUrl           String?
  userId             Int
}
