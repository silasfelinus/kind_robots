generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Art {
  id          Int           @id @unique @default(autoincrement())
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?
  galleryId   Int?
  path        String
  prompt      String?       @db.Text
  artPromptId Int?
  userId      Int?          @default(0)
  Pitch       Pitch?        @relation(fields: [pitchId], references: [id])
  pitchId     Int?
  pitch       String?
  boos        Int?          @default(0)
  claps       Int?          @default(0)
  ArtPrompt   ArtPrompt?    @relation(fields: [artPromptId], references: [id])
  Gallery     Gallery?      @relation(fields: [galleryId], references: [id])
  Tags        Tag[]
  User        User?         @relation(fields: [userId], references: [id])
  ArtReaction ArtReaction[]
  steps       Int?
  seed        Int?
  sampler     String?
  cfg         String?
  checkpoint  String?
  isNsfw      Boolean?      @default(false)
  isPublic    Boolean?      @default(false)
  isOrphan    Boolean?      @default(false)
  channelId   Int?
  Channel     Channel?      @relation(fields: [channelId], references: [id])
}

model ArtPrompt {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  userId    Int       @default(0)
  prompt    String    @db.Text
  galleryId Int?      @default(21)
  pitch     String?
  Art       Art[]
  User      User      @relation(fields: [userId], references: [id])
}

model ArtReaction {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  userId    Int
  artId     Int?
  claps     Int       @default(0)
  boos      Int       @default(0)
  title     String?
  comment   String?   @db.Text
  reaction  String?
  Art       Art?      @relation(fields: [artId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
  tags      Tag[]
  Pitch     Pitch?    @relation(fields: [pitchId], references: [id])
  pitchId   Int?
}

model Bot {
  id                Int       @id @unique @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  BotType           String
  name              String    @unique
  isPublic          Boolean   @default(true)
  underConstruction Boolean   @default(false)
  canDelete         Boolean   @default(false)
  subtitle          String    @default("Kind Robot")
  description       String    @default("I'm a kind robot")
  avatarImage       String    @default("/images/wonderchest/wonderchest304_(23).webp")
  botIntro          String    @default("You're a Kind Robot")
  userIntro         String    @default("Let's make a difference. Here's my idea:")
  prompt            String    @default("Arm butterflies with mini-flamethrowers to kick mosquitos butts")
  trainingPath      String?
  theme             String?
  personality       String    @default("helpful, inquisitive, considerate")
  modules           String?
  userId            Int?
  User              User?     @relation(fields: [userId], references: [id])
}

model Channel {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  userId      Int?      @default(0)
  label       String    @default("global")
  title       String?
  description String?   @db.Text
  tagId       Int?
  Tag         Tag?
  User        User?     @relation(fields: [userId], references: [id])
  Message     Message[]
  Pitch       Pitch?
  Art         Art[]

  @@index([userId], map: "Channel_userId_fkey")
}

model Gallery {
  id             Int       @id @unique @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  name           String    @unique
  description    String?   @db.Text
  mediaId        String?
  url            String?
  custodian      String?
  userId         Int?
  content        String
  highlightImage String?
  imagePaths     String?   @db.Text
  isNsfw         Boolean   @default(false)
  Art            Art[]
  User           User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Gallery_userId_fkey")
}

model Game {
  id         Int       @id @unique @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  content    String    @db.Text
  category   String    @default("Blue Sky Tasks")
  isFinished Boolean   @default(false)
  userId     Int
  reward     String    @default("A Magic Reward")
  icon       String?
  points     Int       @default(10)
  isPrivate  Boolean   @default(false)
  User       User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "Game_userId_fkey")
}

model Log {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  timestamp DateTime @default(now())
  username  String?
}

model Message {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  sender    String    @default("user")
  recipient String    @default("prompt")
  content   String    @db.Text
  channelId Int
  botId     Int?      @default(0)
  userId    Int?      @default(0)
  Channel   Channel   @relation(fields: [channelId], references: [id])
  User      User?     @relation(fields: [userId], references: [id])

  @@index([channelId], map: "Message_channelId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model Milestone {
  id              Int               @id @default(autoincrement())
  label           String
  message         String
  icon            String            @default("mdi:milestone-add")
  karma           Int               @default(100)
  isRepeatable    Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  triggerCode     String
  tooltip         String?           @default("this has not been revealed")
  isActive        Boolean           @default(false)
  pageHint        String?
  subtleHint      String?
  MilestoneRecord MilestoneRecord[]
}

model MilestoneRecord {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  milestoneId Int
  userId      Int
  Milestone   Milestone @relation(fields: [milestoneId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}

model Project {
  id                 Int       @id @unique @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime?
  name               String
  title              String
  category           String
  content            String    @default("Here's the idea...") @db.Text
  allowComments      Boolean   @default(false)
  description        String    @default("")
  isPublic           Boolean   @default(true)
  hasAdmission       Boolean   @default(false)
  paywallDestination String?
  hostId             Int
  usdFee             Float
  portalUrl          String?
  pitchUrl           String?
  userId             Int
  User               User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "Project_userId_fkey")
}

model Resource {
  id           Int          @id @unique @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?
  userId       Int?
  name         String       @unique
  customLabel  String?
  MediaPath    String?
  customUrl    String?
  civitaiUrl   String?
  huggingUrl   String?
  localPath    String?
  description  String?      @db.Text
  resourceType ResourceType @default(CHECKPOINT)
  isNsfw       Boolean      @default(false)
  User         User?        @relation(fields: [userId], references: [id])

  @@index([userId], map: "Resource_userId_fkey")
}

model Reward {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  icon       String
  text       String
  power      String
  collection String    @default("genesis")
  rarity     Int       @default(50)
  label      String?
  Todo       Todo[]
  User       User[]    @relation("RewardToUser")
}

// tags started as a small SmartTag system, but has grown into a gallery game of their own
model Tag {
  id           Int           @id @unique @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  label        String        @default("pitch")
  pitch        String?
  title        String
  userId       Int           @default(0)
  isNSFW       Boolean       @default(false)
  isPublic     Boolean?      @default(false)
  flavorText   String?
  Art          Art[]
  Channel      Channel?      @relation(fields: [channelId], references: [id])
  channelId    Int?          @unique
  User         User          @relation(fields: [userId], references: [id])
  ArtReactions ArtReaction[]
}

model Pitch {
  id             Int           @id @unique @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  title          String
  pitch          String
  flavorText     String?
  designer       String
  userId         Int           @default(0)
  isNSFW         Boolean       @default(false)
  isPublic       Boolean       @default(true)
  isOrphan       Boolean       @default(false)
  claps          Int           @default(0)
  boos           Int           @default(0)
  characterLimit Int? // Optional character limit
  Channel        Channel?      @relation(fields: [channelId], references: [id])
  channelId      Int?          @unique
  User           User          @relation(fields: [userId], references: [id])
  ArtReaction    ArtReaction[] // Reactions to the pitch
  Art            Art[]
}

model Todo {
  id        Int       @id @default(autoincrement())
  task      String
  category  String
  completed Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  userId    Int
  rewardId  Int?
  Reward    Reward?   @relation(fields: [rewardId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model User {
  id                  Int               @id @unique @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?
  Role                Role              @default(USER)
  username            String            @unique
  email               String?           @unique
  questPoints         Int               @default(0)
  emailVerified       DateTime?
  name                String?
  address1            String?
  address2            String?
  avatarImage         String?           @default("/images/botcafe.webp")
  bio                 String?           @default("I was born and then things happened and now I'm here.") @db.Text
  birthday            DateTime?
  city                String?
  country             String?
  discordUrl          String?
  facebookUrl         String?
  instagramUrl        String?
  kindrobotsUrl       String?
  languages           String?
  phone               String?
  state               String?
  timezone            String?
  twitterUrl          String?
  apiKey              String?           @unique
  password            String?
  spotifyAccessToken  String?
  spotifyID           String?
  spotifyRefreshToken String?
  karma               Int?              @default(0)
  mana                Int?              @default(1000)
  clickRecord         Int?              @default(0)
  matchRecord         Int?              @default(0)
  Art                 Art[]
  ArtPrompt           ArtPrompt[]
  ArtReaction         ArtReaction[]
  Bot                 Bot[]
  Channel             Channel[]
  Gallery             Gallery[]
  Game                Game[]
  Message             Message[]
  MilestoneRecord     MilestoneRecord[]
  Project             Project[]
  Resource            Resource[]
  Tag                 Tag[]
  Todo                Todo[]
  Reward              Reward[]          @relation("RewardToUser")
  Pitch               Pitch[]
}

enum BotType {
  PROMPTBOT
  CHATBOT
  ARTBOT
}

enum ModelType {
  BOT
  GALLERY
  MEDIA
  MESSAGE
  PROJECT
  PROMPT
  QUEST
  REACTION
  RESOURCE
  USER
  MODEL
  DREAM
  STATUS
  ERROR
  CONTENT
  GAME
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  ADMIN
  GUEST
  BOT
  DESIGNER
  CHILD
}

enum ResourceType {
  CHECKPOINT
  EMBEDDING
  LORA
  LYCORIS
  HYPERNETWORK
  CONTROLNET
  URL
  API
}
