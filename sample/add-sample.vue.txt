// /components/content/sample/add-sample.vue
// @ts-nocheck
/* eslint-disable */
// test-ignore

<template>
  <div class="rounded-2xl border p-6 m-4 mx-auto bg-base-200 max-w-5xl space-y-6">
    <h1 class="text-4xl text-center font-bold">Create or Edit a Sample</h1>

    <!-- Selector + Designer -->
    <div class="flex flex-wrap justify-between items-center gap-4">
      <sample-selector />

      <div v-if="sampleStore.selectedItem" class="flex items-center">
        <button class="btn btn-icon" @click="deselectCurrentItem">
          <icon name="mdi:close-box" class="text-2xl" />
        </button>
        <span class="ml-2 text-sm">Create new entry</span>
      </div>

      <div class="flex-grow max-w-xs">
        <label class="block text-sm font-semibold mb-1">Designer</label>
        <input
          v-if="canEditDesigner"
          v-model="sampleStore.form.designer"
          type="text"
          class="input input-bordered w-full"
        />
        <p v-else class="text-sm text-base-content/70">{{ sampleStore.form.designer }}</p>
      </div>

      <div class="flex gap-4">
        <div>
          <label class="block text-sm font-semibold mb-1">Visibility</label>
          <div class="flex space-x-2">
            <button
              type="button"
              class="btn btn-sm"
              :class="sampleStore.form.isPublic ? 'btn-primary' : 'btn-outline'"
              @click="sampleStore.form.isPublic = true"
            >
              Public
            </button>
            <button
              type="button"
              class="btn btn-sm"
              :class="!sampleStore.form.isPublic ? 'btn-primary' : 'btn-outline'"
              @click="sampleStore.form.isPublic = false"
            >
              Private
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Form Fields -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="space-y-4">
        <choice-manager label="title" model="SampleModel" />
        <choice-manager label="label" model="SampleModel" />
        <choice-manager label="type" model="SampleModel" />
      </div>
      <div class="space-y-4">
        <choice-manager label="icon" model="SampleModel" />
        <choice-manager label="link" model="SampleModel" />
        <choice-manager label="component" model="SampleModel" />
      </div>
    </div>

    <!-- Submit -->
    <form @submit.prevent="handleSubmit" class="pt-4">
      <div v-if="isLoading" class="loading loading-ring loading-lg"></div>
      <div v-if="errorMessage" class="text-red-500 mt-2">{{ errorMessage }}</div>
      <div v-if="successMessage" class="text-green-500 mt-2">{{ successMessage }}</div>

      <button type="submit" class="btn btn-primary mt-4" :disabled="isLoading">
        <span v-if="isLoading">Saving...</span>
        <span v-else>{{ sampleStore.form.id ? 'Update Sample' : 'Create Sample' }}</span>
      </button>
    </form>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useSampleStore } from '@/stores/sampleStore'
import { useChoiceStore } from '@/stores/choiceStore'
import { useUserStore } from '@/stores/userStore'

const sampleStore = useSampleStore()
const choiceStore = useChoiceStore()
const userStore = useUserStore()

const isLoading = ref(false)
const errorMessage = ref(null)
const successMessage = ref(null)

const canEditDesigner = computed(() =>
  !sampleStore.form.id || sampleStore.form.userId === userStore.userId
)

function deselectCurrentItem() {
  sampleStore.deselect()
}

async function handleSubmit() {
  isLoading.value = true
  errorMessage.value = null
  successMessage.value = null

  try {
    const fields = ['title', 'label', 'type', 'icon', 'link', 'component']
    fields.forEach((field) => {
      choiceStore.applyToForm(sampleStore.form, field, 'SampleModel')
    })

    const result = await sampleStore.save()
    if (result.success) {
      successMessage.value = sampleStore.form.id
        ? 'Sample updated successfully!'
        : 'Sample created successfully!'
    } else {
      errorMessage.value = result.message || 'Failed to save sample.'
    }
  } catch (error) {
    errorMessage.value = `Error: ${(error as Error).message}`
  } finally {
    isLoading.value = false
  }
}

onMounted(() => {
  sampleStore.initialize()
  choiceStore.initialize()
})
</script>
