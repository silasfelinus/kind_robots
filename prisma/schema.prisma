generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Art {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @default(now()) @updatedAt
  path          String?         @default("UNDEFINED") @db.VarChar(764)
  checkpoint    String?         @db.VarChar(256)
  sampler       String?         @db.VarChar(764)
  seed          Int?            @default(-1)
  steps         Int?
  designer      String?         @db.VarChar(764)
  isPublic      Boolean?        @default(false)
  isMature      Boolean?        @default(false)
  promptId      Int?
  userId        Int?            @default(10)
  pitchId       Int?
  galleryId     Int?            @default(21)
  promptString  String          @default(" ")
  cfg           Int?            @default(3)
  cfgHalf       Boolean?        @default(false)
  artImageId    Int?
  imagePath     String?
  Gallery       Gallery?        @relation(fields: [galleryId], references: [id])
  Pitch         Pitch?          @relation(fields: [pitchId], references: [id])
  Prompt        Prompt?         @relation(fields: [promptId], references: [id])
  User          User?           @relation(fields: [userId], references: [id])
  ArtImage      ArtImage?
  Reaction      Reaction[]
  ArtCollection ArtCollection[] @relation("ArtToArtCollection")
  genres        String?

  @@index([galleryId], map: "Art_galleryId_fkey")
  @@index([pitchId], map: "Art_pitchId_fkey")
  @@index([promptId], map: "Art_promptId_fkey")
  @@index([userId], map: "Art_userId_fkey")
}

model ArtImage {
  id             Int       @id @default(autoincrement())
  imageData      String    @db.LongText
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  artId          Int?      @unique
  characterId    Int?      @unique
  galleryId      Int?      @default(21)
  userId         Int?      @default(10)
  fileName       String?   @db.VarChar(764)
  fileType       String    @default("png")
  botId          Int?      @unique
  componentId    Int?      @unique
  milestoneId    Int?      @unique
  pitchId        Int?      @unique
  promptId       Int?      @unique
  reactionId     Int?      @unique
  resourceId     Int?      @unique
  rewardId       Int?      @unique
  tagId          Int?      @unique
  chatId Int?     @unique
  Chat Chat?      @relation(fields: [chatId], references: [id])
  Art            Art?      @relation(fields: [artId], references: [id])
  Gallery        Gallery?  @relation(fields: [galleryId], references: [id])
  User           User?     @relation(fields: [userId], references: [id])
  Bot            Bot?      @relation(fields: [botId], references: [id])       
  Character      Character?    @relation(fields: [characterId], references: [id])
  Component      Component?          @relation(fields: [componentId], references: [id])
  Milestone      Milestone?           @relation(fields: [milestoneId], references: [id])
  Pitch          Pitch?           @relation(fields: [pitchId], references: [id])
  Prompt         Prompt?           @relation(fields: [promptId], references: [id])
  Reaction       Reaction?          @relation(fields: [reactionId], references: [id])
  Resource       Resource?           @relation(fields: [resourceId], references: [id])
  Reward         Reward?           @relation(fields: [rewardId], references: [id])
  Tag            Tag?          @relation(fields: [tagId], references: [id])
  Scenarios      Scenario[]

  @@index([galleryId], map: "ArtImage_galleryId_fkey")
  @@index([userId], map: "ArtImage_userId_fkey")
}

model ArtCollection {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  userId    Int       @default(10)
  User      User      @relation(fields: [userId], references: [id])
  art       Art[]     @relation("ArtToArtCollection")
  label     String?

  @@index([userId], map: "ArtCollection_userId_fkey")
}

model Bot {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?      @default(now()) @updatedAt
  BotType           String         @db.VarChar(764)
  name              String         @unique(map: "Bot_id_key", length: 200) @db.VarChar(256)
  subtitle          String?        @db.VarChar(764)
  description       String?        @db.VarChar(764)
  avatarImage       String?        @db.VarChar(764)
  botIntro          String         @db.VarChar(764)
  userIntro         String         @db.VarChar(764)
  prompt            String         @db.VarChar(764)
  trainingPath      String?        @db.VarChar(764)
  theme             String?        @db.VarChar(764)
  personality       String?        @db.VarChar(764)
  modules           String?        @db.VarChar(764)
  sampleResponse    String?        @db.VarChar(764)
  tagline           String?        @db.VarChar(764)
  isPublic          Boolean        @default(false)
  underConstruction Boolean        @default(false)
  canDelete         Boolean        @default(false)
  userId            Int?           @default(1)
  designer          String         @default("silasfelinus")
  artImageId        Int?
  ArtImage          ArtImage?
  User              User?          @relation(fields: [userId], references: [id])
  Prompts           Prompt[]
  Reactions         Reaction[]
  Chats              Chat[]

  @@index([userId], map: "Bot_userId_fkey")
}


model Chat {
  id              Int                @id @default(autoincrement())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @default(now()) @updatedAt
  type            ChatType
  sender          String             @db.VarChar(255)
  recipient       String?            @db.VarChar(255)
  content         String             @db.Text
  title           String?            @db.VarChar(255)
  channel         String?            @db.VarChar(255)
  isPublic        Boolean            @default(true)
  isFavorite      Boolean            @default(false)
  previousEntryId Int?
  originId        Int?
  userId          Int?
  botId           Int?
  recipientId			Int?
  artImageId      Int?
  promptId        Int?
  botName         String?            @db.VarChar(255)
  Reactions       Reaction[]
  ArtImage        ArtImage?        
  Bot             Bot?               @relation(fields: [botId], references: [id])
  Prompt          Prompt?            @relation(fields: [promptId], references: [id])
  User            User?              @relation(fields: [userId], references: [id])
  botResponse     String?
  characterId     Int?
  Character       Character?          @relation(fields: [characterId], references: [id])
}

model Character {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @default(now()) @updatedAt
  name            String         @db.VarChar(256)
  honorific      String?        @default("adventurer")
  achievements    String?        @db.VarChar(256)
  alignment       String?        @db.VarChar(256)
  experience      Int?           @default(0)
  level           Int?           @default(1)
  artPrompt       String?
  class           String?        @db.VarChar(764)
  species         String?        @db.VarChar(764)
  backstory       String?        @db.VarChar(2048)
  drive           String?        @db.VarChar(764)
  inventory       String?        @db.VarChar(2048)
  quirks          String?        @db.VarChar(2048) 
  skills          String?        @db.VarChar(2048) 
  genre           String?        @db.VarChar(256) 
  imagePath       String?        @db.VarChar(256) 
  designer        String?
  personality   String?

  // Main Stats
  statName1       String?        @default("Luck")
  statValue1      Int?           @default(59)
  statName2       String?        @default("Swol")
  statValue2      Int?           @default(49)
  statName3       String?        @default("Wits")
  statValue3      Int?           @default(72)
  statName4       String?        @default("Flexibilty")
  statValue4      Int?           @default(93)
  statName5       String?        @default("Rizz")
  statValue5      Int?           @default(9)
  statName6       String?        @default("Empathy")
  statValue6      Int?           @default(71)

  // Goal Stats
  goalStat1Name   String?        @default("Principled|Chaotic") //currently unused
  goalStat1Value  Int?           @default(0)  //currently unused
  goalStat2Name   String?        @default("Introvert|Extrovert")  //currently unused
  goalStat2Value  Int?           @default(0)  //currently unused
  goalStat3Name   String?        @default("Passive|Aggressive")  //currently unused
  goalStat3Value  Int?           @default(0)  //currently unused
  goalStat4Name   String?        @default("Optimist|Pessimist")  //currently unused
  goalStat4Value  Int?           @default(0)  //currently unused

  artImageId      Int? 
  ArtImage        ArtImage?     
  isPublic        Boolean        @default(false)
  userId          Int           @default(10)
  User            User          @relation(fields: [userId], references: [id])
  Rewards         Reward[]
  Chats           Chat[]
  Scenarios       Scenario[]
}



enum ChatType {
  ToBot
  BotResponse
  ToForum
  ToUser
  ToCharacter
  Weirdlandia
}



model Component {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?  @default(now()) @updatedAt
  folderName        String
  componentName     String     @unique
  isWorking         Boolean    @default(true)
  underConstruction Boolean    @default(false)
  isBroken          Boolean    @default(false)
  title             String?
  notes             String?
  artImageId        Int?
  ArtImage          ArtImage?
  Reactions         Reaction[]
  Tags              Tag[]      @relation("ComponentToTag")
}

model Gallery {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @default(now()) @updatedAt
  name           String     @db.VarChar(256)
  description    String?    @db.Text
  url            String?    @db.VarChar(256)
  custodian      String?    @db.VarChar(256)
  content        String     @db.VarChar(764)
  highlightImage String?    @db.VarChar(256)
  imagePaths     String?    @db.Text
  isMature       Boolean    @default(false)
  userId         Int?       @default(1)
  isPublic       Boolean    @default(true)
  Art            Art[]
  ArtImage       ArtImage[]
  User           User?      @relation(fields: [userId], references: [id])
  Prompts        Prompt[]
  Reactions      Reaction[]

  @@index([userId], map: "Gallery_userId_fkey")
}

model Log {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  timestamp DateTime @db.DateTime(0)
  username  String?  @db.VarChar(764)
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Log_userId_fkey")
}


model Milestone {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @default(now()) @updatedAt
  label            String            @db.VarChar(764)
  message          String            @db.VarChar(764)
  icon             String?           @db.VarChar(764)
  karma            Int               @default(0)
  pageHint         String?           @db.VarChar(764)
  subtleHint       String?           @db.VarChar(764)
  triggerCode      String?           @db.VarChar(764)
  tooltip          String?           @db.VarChar(764)
  isActive         Boolean           @default(false)
  isRepeatable     Boolean           @default(true)
  ArtImage         ArtImage?
  artImageId       Int?
  MilestoneRecords MilestoneRecord[]
}

model MilestoneRecord {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
  username    String?   @db.VarChar(764)
  isConfirmed Boolean   @default(false)
  milestoneId Int
  userId      Int
  Milestones  Milestone @relation(fields: [milestoneId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@index([milestoneId], map: "MilestoneRecord_milestoneId_fkey")
  @@index([userId], map: "MilestoneRecord_userId_fkey")
}

model Pitch {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @default(now()) @updatedAt
  title          String?    @db.VarChar(256)
  pitch          String     @db.VarChar(764)
  designer       String?    @db.VarChar(256)
  flavorText     String?    @db.VarChar(512)
  highlightImage String?    @db.VarChar(256)
  PitchType      PitchType  @default(ARTPITCH)
  isMature       Boolean    @default(false)
  isPublic       Boolean    @default(true)
  userId         Int?       @default(1)
  imagePrompt    String?    @db.VarChar(256)
  description    String?    @db.VarChar(256)
  examples       String?    @db.LongText
  artImageId     Int?
  ArtImage       ArtImage?
  Art            Art[]
  User           User?      @relation(fields: [userId], references: [id])
  Prompts        Prompt[]
  Reactions      Reaction[]
  Tags           Tag[]      @relation("PitchToTag")

  @@index([userId], map: "Pitch_userId_fkey")
}


model Prompt {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @default(now()) @updatedAt
  prompt     String         @db.VarChar(764)
  userId     Int?           @default(1)
  galleryId  Int?           @default(21)
  pitchId    Int?
  botId      Int?
  artImageId Int?
  ArtImage   ArtImage?
  Art        Art[]
  Chats      Chat[]
  Reactions  Reaction[]
  Bot        Bot?           @relation(fields: [botId], references: [id])
  Gallery    Gallery?       @relation(fields: [galleryId], references: [id])
  Pitch      Pitch?         @relation(fields: [pitchId], references: [id])
  User       User?          @relation(fields: [userId], references: [id])

  @@index([botId], map: "Prompt_botId_fkey")
  @@index([galleryId], map: "Prompt_galleryId_fkey")
  @@index([pitchId], map: "Prompt_pitchId_fkey")
  @@index([userId], map: "Prompt_userId_fkey")
}

model Reaction {
  id               Int              @id @unique @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @default(now()) @updatedAt
  comment          String?          @db.Text
  userId           Int  
  rating           Int              @default(0)
  artImageId       Int?
  artId            Int?
  pitchId          Int?
  componentId      Int?
  botId            Int?
  galleryId        Int?  
  promptId         Int?      
  resourceId       Int?     
  rewardId         Int?     
  tagId            Int?   
  reactionType     ReactionType
  reactionCategory ReactionCategory @default(ART)
  ArtImage         ArtImage?
  chatId  Int?
  Chat    Chat?      @relation(fields: [chatId], references: [id])
  Art              Art?             @relation(fields: [artId], references: [id])
  Component        Component?       @relation(fields: [componentId], references: [id])
  Pitch            Pitch?           @relation(fields: [pitchId], references: [id])
  User             User             @relation(fields: [userId], references: [id])
  Gallery          Gallery?         @relation(fields: [galleryId], references: [id])
  Bot              Bot?             @relation(fields: [botId], references: [id])       
  Prompt           Prompt?          @relation(fields: [promptId], references: [id])
  Resource         Resource?        @relation(fields: [resourceId], references: [id])
  Reward           Reward?          @relation(fields: [rewardId], references: [id])
  Tag              Tag?             @relation(fields: [tagId], references: [id])

  @@index([artId], map: "Reaction_artId_fkey")
  @@index([pitchId], map: "Reaction_pitchId_fkey")
  @@index([userId], map: "Reaction_userId_fkey")
  @@index([componentId], map: "Reaction_componentId_fkey")
}

model Resource {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @default(now()) @updatedAt
  name         String       @unique(map: "Resource_id_key", length: 200) @db.VarChar(764)
  customLabel  String?      @db.VarChar(764)
  MediaPath    String?      @db.VarChar(764)
  customUrl    String?      @db.VarChar(764)
  civitaiUrl   String?      @db.VarChar(764)
  huggingUrl   String?      @db.VarChar(764)
  localPath    String?      @db.VarChar(764)
  description  String?      @db.Text
  isMature     Boolean      @default(false)
  resourceType ResourceType @default(EMBEDDING)
  userId       Int?         @default(1)
  artImageId   Int?
  ArtImage     ArtImage?
  User         User?        @relation(fields: [userId], references: [id])
  Reactions    Reaction[]

  @@index([userId], map: "Resource_userId_fkey")
}

model Reward {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  icon       String    @db.VarChar(256)
  text       String    @db.VarChar(764)
  power      String    @db.VarChar(764)
  collection String    @db.VarChar(764)
  rarity     Int       @default(0)
  label      String?   @db.VarChar(764)
  userId     Int?      @default(1)
  artImageId Int?
  ArtImage   ArtImage?
  User       User?     @relation(fields: [userId], references: [id])
  Reactions  Reaction[]
  Characters Character[]
  imagePath String?

  @@index([userId], map: "Reward_userId_fkey")
}

model Scenario {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt
  title         String
  description   String
  intros        String
  genres        String?
  userId        Int
  User          User       @relation(fields: [userId], references: [id])
  Characters    Character[]
  artImageId    Int?
  ArtImage      ArtImage?      @relation(fields: [artImageId], references: [id])
  imagePath     String?
  locations     String?
  artPrompt     String?
  inspirations  String?
}

model Tag {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @default(now()) @updatedAt
  label      String      @db.VarChar(256)
  title      String      @db.VarChar(256)
  flavorText String?     @db.VarChar(764)
  pitch      String?     @db.VarChar(764)
  isPublic   Boolean?    @default(false)
  isMature   Boolean     @default(false)
  userId     Int?        @default(1)
  artImageId Int?
  ArtImage   ArtImage?
  User       User?       @relation(fields: [userId], references: [id])
  Components Component[] @relation("ComponentToTag")
  Pitches    Pitch[]     @relation("PitchToTag")
  Reactions  Reaction[]

  @@index([userId], map: "Tag_userId_fkey")
}

model User {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @default(now()) @updatedAt
  username       String            @unique @db.VarChar(255)
  email          String?           @unique @db.VarChar(255)
  questPoints    Int               @default(0)
  emailVerified  DateTime?         @db.DateTime(0)
  name           String?           @db.VarChar(255)
  address1       String?           @db.Text
  address2       String?           @db.Text
  avatarImage    String?           @db.Text
  bio            String?           @db.Text
  birthday       DateTime?         @db.DateTime(0)
  city           String?           @db.Text
  country        String?           @db.Text
  discordUrl     String?           @db.Text
  facebookUrl    String?           @db.Text
  instagramUrl   String?           @db.Text
  kindrobotsUrl  String?           @db.Text
  languages      String?           @db.Text
  phone          String?           @db.VarChar(255)
  state          String?           @db.VarChar(255)
  timezone       String?           @db.VarChar(255)
  twitterUrl     String?           @db.Text
  apiKey         String?           @db.Text
  token          String?           @db.Text
  password       String?           @db.Text
  karma          Int               @default(0)
  mana           Int               @default(0)
  clickRecord    Int?              @default(0)
  matchRecord    Int?              @default(0)
  showMature     Boolean           @default(false)
  Role           Role              @default(USER)
  designerName   String?
  artImageId     Int?
  Art            Art[]
  ArtCollections ArtCollection[]
  ArtImages      ArtImage[]
  Bots           Bot[]
  Characters     Character[]
  Chats          Chat[]
  Galleries      Gallery[]
  Logs           Log[]
  Milestones     MilestoneRecord[]
  Pitches        Pitch[]
  Prompts        Prompt[]
  Reactions      Reaction[]
  Resources      Resource[]
  Rewards        Reward[]
  Tags           Tag[]
  Scenarios      Scenario[]
}

model ReactionToTag {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_ReactionToTag_B_index")
  @@map("_ReactionToTag")
}

model ArtToProduct {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_ArtToProduct_B_index")
  @@map("_ArtToProduct")
}

model ArtToTag {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_ArtToTag_B_index")
  @@map("_ArtToTag")
}

model MilestoneToUser {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_MilestoneToUser_B_index")
  @@map("_MilestoneToUser")
}

model RewardToUser {
  A Int
  B Int

  @@id([A, B])
  @@index([B], map: "_RewardToUser_B_index")
  @@map("_RewardToUser")
}

enum PitchType {
  ARTPITCH
  BRAINSTORM
  WEIRDLANDIA
  RANDOMLIST
  TITLE
}


enum ReactionType {
  LOVED
  CLAPPED
  BOOED
  HATED
  NEUTRAL
  FLAGGED
}

enum ReactionCategory {
  ART
  ART_IMAGE
  PITCH
  COMPONENT
  CHAT_EXCHANGE
  BOT
  GALLERY
  MESSAGE
  POST
  PROMPT
  RESOURCE
  REWARD
  TAG
  TITLE
}


enum ResourceType {
  CHECKPOINT
  EMBEDDING
  LORA
  LYCORIS
  HYPERNETWORK
  CONTROLNET
  URL
  API
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  ADMIN
  GUEST
  BOT
  DESIGNER
  CHILD
}
